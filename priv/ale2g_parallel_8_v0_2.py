#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: ALE2G Parallel V0.2 8-channels
# Author: Devin Butterfield / K6DRS
# Generated: Mon Apr 30 21:21:27 2018
##################################################

from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser
import k6drs


class ale2g_parallel_8_v0_2(gr.top_block):

    def __init__(self):
        gr.top_block.__init__(self, "ALE2G Parallel V0.2 8-channels")

        ##################################################
        # Variables
        ##################################################
        self.samp_rate_downconv = samp_rate_downconv = 8000
        self.samp_rate = samp_rate = 640000
        self.ddc_decim = ddc_decim = 20
        self.channel_filter_taps = channel_filter_taps = [(0.0002493603387847543-0j), (0.00022811056987848133+0j), (0.0002059282414847985+0j), (0.00018199831538368016+0j), (0.0001553735783090815+0j), (0.0001250018394785002+0j), (8.975758828455582e-05+0j), (4.8477591917617247e-05+0j), (-1.308664611038187e-19-0j), (-5.6793996918713674e-05-0j), (-0.00012293666077312082-0j), (-0.00019932918075937778-0j), (-0.0002866971481125802-0j), (-0.00038554679485969245-0j), (-0.0004961232771165669-0j), (-0.0006183711811900139-0j), (-0.0007518998463638127-0j), (-0.0008959518163464963-0j), (-0.0010493781883269548-0j), (-0.0012106189969927073-0j), (-0.0013776910491287708-0j), (-0.001548183267004788-0j), (-0.0017192597733810544-0j), (-0.001887670368887484-0j), (-0.002049771137535572-0j), (-0.0022015515714883804-0j), (-0.0023386715911328793-0j), (-0.002456504851579666-0j), (-0.002550191478803754-0j), (-0.002614697441458702-0j), (-0.002644877415150404-0j), (-0.0026355483569204807-0j), (-0.0025815630797296762-0j), (-0.0024778901133686304-0j), (-0.002319693798199296-0j), (-0.002102416940033436-0j), (-0.0018218634650111198-0j), (-0.0014742778148502111-0j), (-0.0010564241092652082-0j), (-0.0005656589055433869-0j), (7.529256946386964e-19+0j), (0.0006418122793547809+0j), (0.0013602608814835548+0j), (0.002155006630346179+0j), (0.0030248539987951517+0j), (0.003967725206166506+0j), (0.004980647005140781+0j), (0.006059750914573669+0j), (0.007200280204415321+0j), (0.008396615274250507+0j), (0.009642308577895164+0j), (0.010930129326879978+0j), (0.012252125889062881+0j), (0.013599691912531853+0j), (0.014963650144636631+0j), (0.01633433625102043+0j), (0.01770169846713543+0j), (0.019055413082242012+0j), (0.02038497105240822+0j), (0.021679820492863655+0j), (0.022929463535547256+0j), (0.024123582988977432+0j), (0.02525216154754162+0j), (0.02630559541285038+0j), (0.027274807915091515+0j), (0.028151359409093857+0j), (0.02892754226922989+0j), (0.029596475884318352+0j), (0.03015219047665596+0j), (0.03058970533311367+0j), (0.030905073508620262+0j), (0.031095443293452263+0j), (0.031159091740846634+0j), (0.031095443293452263+0j), (0.030905073508620262+0j), (0.03058970533311367+0j), (0.03015219047665596+0j), (0.029596475884318352+0j), (0.02892754226922989+0j), (0.028151359409093857+0j), (0.027274807915091515+0j), (0.02630559541285038+0j), (0.02525216154754162+0j), (0.024123582988977432+0j), (0.022929463535547256+0j), (0.021679820492863655+0j), (0.02038497105240822+0j), (0.019055413082242012+0j), (0.01770169846713543+0j), (0.01633433625102043+0j), (0.014963650144636631+0j), (0.013599691912531853+0j), (0.012252125889062881+0j), (0.010930129326879978+0j), (0.009642308577895164+0j), (0.008396615274250507+0j), (0.007200280204415321+0j), (0.006059750914573669+0j), (0.004980647005140781+0j), (0.003967725206166506+0j), (0.0030248539987951517+0j), (0.002155006630346179+0j), (0.0013602608814835548+0j), (0.0006418122793547809+0j), (7.529256946386964e-19+0j), (-0.0005656589055433869-0j), (-0.0010564241092652082-0j), (-0.0014742778148502111-0j), (-0.0018218634650111198-0j), (-0.002102416940033436-0j), (-0.002319693798199296-0j), (-0.0024778901133686304-0j), (-0.0025815630797296762-0j), (-0.0026355483569204807-0j), (-0.002644877415150404-0j), (-0.002614697441458702-0j), (-0.002550191478803754-0j), (-0.002456504851579666-0j), (-0.0023386715911328793-0j), (-0.0022015515714883804-0j), (-0.002049771137535572-0j), (-0.001887670368887484-0j), (-0.0017192597733810544-0j), (-0.001548183267004788-0j), (-0.0013776910491287708-0j), (-0.0012106189969927073-0j), (-0.0010493781883269548-0j), (-0.0008959518163464963-0j), (-0.0007518998463638127-0j), (-0.0006183711811900139-0j), (-0.0004961232771165669-0j), (-0.00038554679485969245-0j), (-0.0002866971481125802-0j), (-0.00019932918075937778-0j), (-0.00012293666077312082-0j), (-5.6793996918713674e-05-0j), (-1.308664611038187e-19-0j), (4.8477591917617247e-05+0j), (8.975758828455582e-05+0j), (0.0001250018394785002+0j), (0.0001553735783090815+0j), (0.00018199831538368016+0j), (0.0002059282414847985+0j), (0.00022811056987848133+0j), (0.0002493603387847543+0j)]
        self.center_freq_7 = center_freq_7 = 21225000
        self.center_freq_6 = center_freq_6 = 18118000
        self.center_freq_5 = center_freq_5 = 14175000
        self.center_freq_4 = center_freq_4 = 10125000
        self.center_freq_3 = center_freq_3 = 7150000
        self.center_freq_2 = center_freq_2 = 5357000
        self.center_freq_1 = center_freq_1 = 3750000
        self.center_freq_0 = center_freq_0 = 1900000
        self.audio_usb_taps_voice_0 = audio_usb_taps_voice_0 = [(-0.0003292683104518801+0.0015007172478362918j), (-0.0005544789019040763+0.0010015933075919747j), (-0.00047834881115704775+0.00046904702321626246j), (-0.0001207425375469029+6.37781122350134e-05j), (0.00041837868047878146-8.322041685460135e-05j), (0.000983330886811018+9.197888721246272e-05j), (0.0014033259358257055+0.0005652018007822335j), (0.0015395712107419968+0.0012260039802640676j), (0.0013266598107293248+0.0019034951692447066j), (0.0007964939577504992+0.0024110290687531233j), (7.656715752091259e-05+0.0025990235153585672j), (-0.0006393530056811869+0.0024018005933612585j), (-0.0011425395496189594+0.0018644505180418491j), (-0.0012700638035312295+0.0011398105416446924j), (-0.0009581835474818945+0.00045318566844798625j), (-0.0002716747112572193+4.166271537542343e-05j), (0.0006024439353495836+8.332890138262883e-05j), (0.0013990201987326145+0.0006366512388922274j), (0.0018476734403520823+0.0016097045736387372j), (0.001755473087541759+0.0027722043450921774j), (0.0010749922366812825+0.0038116578944027424j), (-6.512192339869216e-05+0.004421370103955269j), (-0.0013809758238494396+0.004396587144583464j), (-0.002505125477910042+0.003709621261805296j), (-0.0030925164464861155+0.002537953434512019j), (-0.0029312600381672382+0.0012310532620176673j), (-0.0020238650031387806+0.00021941144950687885j), (-0.0006099416059441864-0.0001120152446674183j), (0.0008833520114421844+0.0004500926297623664j), (0.0019554225727915764+0.0018617247696965933j), (0.0021818506065756083+0.0038078180514276028j), (0.0013559401268139482+0.0057726395316421986j), (-0.00042350072180852294+0.007180978078395128j), (-0.002751653315499425+0.007572899106889963j), (-0.005013739224523306+0.006760210730135441j), (-0.006557196844369173+0.004913198761641979j), (-0.006893237587064505+0.002543030306696892j), (-0.005866979714483023+0.00037488710950128734j), (-0.0037392000667750835-0.0008589774370193481j), (-0.0011451557511463761-0.0006487268256023526j), (0.0010684997541829944+0.0011113117216154933j), (0.002088980982080102+0.004050605930387974j), (0.001395277795381844+0.007393255364149809j), (-0.0010513769229874015+0.010162833146750927j), (-0.004750740714371204+0.011469206772744656j), (-0.008770667016506195+0.010794642381370068j), (-0.011999319307506084+0.00818916317075491j), (-0.01347636990249157+0.004305671434849501j), (-0.012706243433058262+0.0002494779764674604j), (-0.009853638708591461-0.0027269034180790186j), (-0.0057497695088386536-0.003601608332246542j), (-0.0016910287085920572-0.0019219089299440384j), (0.000924714608117938+0.002005879068747163j), (0.0010243061697110534+0.007147022057324648j), (-0.0017798461485654116+0.011998455040156841j), (-0.007012258283793926+0.015016305260360241j), (-0.013410644605755806+0.015091393142938614j), (-0.0192529559135437+0.011928518302738667j), (-0.022853773087263107+0.0062037864699959755j), (-0.02308928221464157-0.0005668987287208438j), (-0.019790062680840492-0.0064302668906748295j), (-0.01386928092688322-0.009565623477101326j), (-0.007125679403543472-0.008858672343194485j), (-0.001757096964865923-0.0043016597628593445j), (0.0002873408666346222+0.0029175442177802324j), (-0.0020717275328934193+0.01068899780511856j), (-0.008643684908747673+0.016560062766075134j), (-0.017929071560502052+0.01846490055322647j), (-0.02748149260878563+0.015390217304229736j), (-0.03458887338638306+0.007767030503600836j), (-0.037088025361299515-0.002552962629124522j), (-0.034071579575538635-0.012760203331708908j), (-0.02626146376132965-0.019879598170518875j), (-0.015909403562545776-0.02167310193181038j), (-0.006219713948667049-0.017383193597197533j), (-0.00043651985470205545-0.008077138103544712j), (-0.0008506864542141557+0.003543288679793477j), (-0.008025266230106354+0.013847635127604008j), (-0.020493023097515106+0.019319899380207062j), (-0.0350535586476326+0.017644258216023445j), (-0.04762337729334831+0.008504207246005535j), (-0.05441976711153984-0.006170567125082016j), (-0.05314136669039726-0.022625941783189774j), (-0.04378455877304077-0.03629458695650101j), (-0.028819547966122627-0.0431319996714592j), (-0.012624423019587994-0.04089421033859253j), (-0.00029401417123153806-0.029963593930006027j), (0.003861079690977931-0.013437243178486824j), (-0.0023076471406966448+0.0036048567853868008j), (-0.017959896475076675+0.015492137521505356j), (-0.039284296333789825+0.017644496634602547j), (-0.060420744121074677+0.008054789155721664j), (-0.07507878541946411-0.01189175434410572j), (-0.07841763645410538-0.037561479955911636j), (-0.06864076852798462-0.06221310421824455j), (-0.04780120030045509-0.078871950507164j), (-0.02151012420654297-0.08243319392204285j), (0.0024541313759982586-0.07138095051050186j), (0.01631227135658264-0.04857509955763817j), (0.0146426847204566-0.020790740847587585j), (-0.003755246987566352+0.002960360376164317j), (-0.03509216383099556+0.013933583162724972j), (-0.07124096155166626+0.00631063524633646j), (-0.10174746066331863-0.020759232342243195j), (-0.1167333796620369-0.06239626556634903j), (-0.10992451012134552-0.10885200649499893j), (-0.08093133568763733-0.14790301024913788j), (-0.036045994609594345-0.16823452711105347j), (0.012824793346226215-0.16294051706790924j), (0.050978098064661026-0.13215309381484985j), (0.06487033516168594-0.08396907895803452j), (0.046225182712078094-0.033238623291254044j), (-0.0048209065571427345+0.0016717073740437627j), (-0.07848627120256424+0.0034691253677010536j), (-0.15654323995113373-0.039213214069604874j), (-0.21586667001247406-0.1279514729976654j), (-0.233629509806633-0.25274261832237244j), (-0.19296693801879883-0.39292484521865845j), (-0.08773119002580643-0.5207937359809875j), (0.07489825040102005-0.6072222590446472j), (0.27472275495529175-0.6280557513237j), (0.4818458557128906-0.569800615310669j), (0.6623749732971191-0.43323269486427307j), (0.785275936126709-0.23400132358074188j), (0.8288384675979614+6.125925210653804e-06j), (0.785272479057312+0.23401294648647308j), (0.6623685956001282+0.43324247002601624j), (0.4818373918533325+0.5698078274726868j), (0.2747134566307068+0.6280598044395447j), (0.07488927245140076+0.607223391532898j), (-0.08773889392614365+0.5207924246788025j), (-0.19297273457050323+0.39292198419570923j), (-0.23363326489925385+0.25273919105529785j), (-0.21586856245994568+0.12794828414916992j), (-0.1565438210964203+0.03921090066432953j), (-0.07848621904850006-0.003470285329967737j), (-0.004820881877094507-0.0016717786202207208j), (0.046224694699048996+0.03323930874466896j), (0.06486909091472626+0.08397004008293152j), (0.050976142287254333+0.13215383887290955j), (0.012822385877370834+0.16294069588184357j), (-0.03604848310351372+0.1682339906692505j), (-0.08093351870775223+0.14790180325508118j), (-0.10992611199617386+0.1088503822684288j), (-0.11673430353403091+0.06239454075694084j), (-0.10174776613712311+0.020757727324962616j), (-0.0712408646941185-0.006311688106507063j), (-0.035091955214738846-0.013934101909399033j), (-0.0037552034482359886-0.0029604157898575068j), (0.014642377384006977+0.020790958777070045j), (0.016311554238200188+0.04857534170150757j), (0.002453076420351863+0.07138098776340485j), (-0.021511303260922432+0.08243288844823837j), (-0.04780232533812523+0.07887126505374908j), (-0.06864166259765625+0.06221212074160576j), (-0.07841817289590836+0.0375603586435318j), (-0.07507895678281784+0.011890680529177189j), (-0.060420628637075424-0.008055654354393482j), (-0.03928404673933983-0.017645057290792465j), (-0.017959674820303917-0.01549239456653595j), (-0.0023075956851243973-0.0036048900801688433j), (0.0038608876056969166+0.013437298126518726j), (-0.00029444281244650483+0.02996359020471573j), (-0.012625007890164852+0.0408940315246582j), (-0.028820164501667023+0.04313158243894577j), (-0.04378507658839226+0.036293961107730865j), (-0.05314169079065323+0.022625179961323738j), (-0.054419856518507004+0.0061697885394096375j), (-0.04762325808405876-0.008504888974130154j), (-0.0350533053278923-0.017644759267568588j), (-0.02049274556338787-0.01932019181549549j), (-0.00802506785839796-0.013847749680280685j), (-0.000850635813549161-0.0035433010198175907j), (-0.0004366353969089687+0.00807713158428669j), (-0.006219962611794472+0.01738310419023037j), (-0.01590971276164055+0.021672874689102173j), (-0.026261748746037483+0.01987922377884388j), (-0.03407176211476326+0.01275971531867981j), (-0.0370880626142025+0.0025524322409182787j), (-0.0345887616276741-0.007767525035887957j), (-0.027481285855174065-0.01539058331400156j), (-0.017928825691342354-0.018465138971805573j), (-0.00864346418529749-0.016560178250074387j), (-0.0020715848077088594-0.0106890257447958j), (0.0002873798366636038-0.002917540492489934j), (-0.0017571542412042618+0.004301636479794979j), (-0.007125798147171736+0.008858577348291874j), (-0.013869408518075943+0.009565439075231552j), (-0.019790150225162506+0.006430002395063639j), (-0.023089289665222168+0.0005665904609486461j), (-0.022853689268231392-0.006204091012477875j), (-0.019252797588706017-0.01192877534776926j), (-0.013410442508757114-0.01509157195687294j), (-0.007012057583779097-0.015016399323940277j), (-0.0017796858446672559-0.011998478323221207j), (0.0010244015138596296-0.007147008087486029j), (0.0009247414418496192-0.002005866728723049j), (-0.0016910543199628592+0.001921886345371604j), (-0.005749817471951246+0.003601531498134136j), (-0.009853674098849297+0.002726772101595998j), (-0.012706240639090538-0.0002496476226951927j), (-0.013476312160491943-0.0043058511801064014j), (-0.01199920941144228-0.008189323358237743j), (-0.00877052266150713-0.01079475972801447j), (-0.0047505879774689674-0.01146927010267973j), (-0.0010512411827221513-0.010162847116589546j), (0.0013953765155747533-0.007393236737698317j), (0.0020890349987894297-0.004050577990710735j), (0.0010685146553441882-0.0011112975189462304j), (-0.0011451644822955132+0.0006487115169875324j), (-0.0037392117083072662+0.0008589275530539453j), (-0.005866974592208862-0.0003749654279090464j), (-0.0068932040594518185-0.002543122274801135j), (-0.006557130720466375-0.004913285840302706j), (-0.005013648886233568-0.0067602782510221004j), (-0.002751552267000079-0.007572936359792948j), (-0.000423404824687168-0.007180983666330576j), (0.0013560171937569976-0.0057726213708519936j), (0.002181901363655925-0.003807788947597146j), (0.0019554472528398037-0.001861698692664504j), (0.0008833580650389194-0.000450080813607201j), (-0.0006099430611357093+0.00011200710287084803j), (-0.0020238622091710567-0.00021943847241345793j), (-0.002931243507191539-0.0012310923775658011j), (-0.0030924826860427856-0.0025379948783665895j), (-0.0025050758849829435-0.003709654789417982j), (-0.001380917034111917-0.004396605771034956j), (-6.506288627861068e-05-0.0044213710352778435j), (0.0010750431101769209-0.003811643458902836j), (0.0017555102240294218-0.0027721808291971684j), (0.0018476948607712984-0.0016096798935905099j), (0.001399028580635786-0.0006366325542330742j), (0.0006024449830874801-8.332085417350754e-05j), (-0.00027167415828444064-4.1666338802315295e-05j), (-0.0009581775520928204-0.0004531984741333872j), (-0.0012700507650151849-0.0011398250935599208j), (-0.001142518245615065-0.0018644635565578938j), (-0.0006393254152499139-0.0024018078111112118j), (7.659690163563937e-05-0.0025990225840359926j), (0.0007965216063894331-0.0024110199883580208j), (0.0013266816968098283-0.0019034800352528691j), (0.0015395852969959378-0.00122598628513515j), (0.001403332338668406-0.0005651857354678214j), (0.0009833319345489144-9.19676385819912e-05j), (0.0004183777200523764+8.322520443471149e-05j), (-0.00012074181722709909-6.377948739100248e-05j), (-0.0004783434560522437-0.00046905246563255787j), (-0.0005544674349948764-0.0010015997104346752j), (-0.00032925111008808017-0.0015007209731265903j)]
        self.audio_usb_taps_0 = audio_usb_taps_0 = [(-0.00043038511648774147+0.001324591925367713j), (-0.0005423068068921566+0.0007464219816029072j), (-0.0002987829502671957+0.00021707869018428028j), (0.00021911622025072575-7.11952307028696e-05j), (0.0008352960576303303-7.968644494260602e-11j), (0.0013331762747839093+0.000433175329817459j), (0.001525946776382625+0.001108665601350367j), (0.0013209523167461157+0.0018181361956521869j), (0.0007569553563371301+0.0023296724539250135j), (-1.3420997646562682e-09+0.0024654690641909838j), (-0.0007042058277875185+0.002167317783460021j), (-0.0011092377826571465+0.0015267323469743133j), (-0.0010543516837060452+0.0007660298724658787j), (-0.0005292151472531259+0.00017195180407725275j), (0.00030785080161876976+3.6453126628366306e-10j), (0.0011695813154801726+0.00038002169458195567j), (0.0017297242302447557+0.0012567220255732536j), (0.0017366803949698806+0.0023903432302176952j), (0.00111255026422441+0.0034240970853716135j), (-7.298322834969895e-09+0.004001548979431391j), (-0.0012661910150200129+0.003896909300237894j), (-0.002261020941659808+0.0031120148487389088j), (-0.0026158420369029045+0.001900511677376926j), (-0.0021604641806334257+0.0007019717595539987j), (-0.0010078998748213053-2.4830946188103553e-09j), (0.0004562287940643728+0.0001482390216551721j), (0.0016864383360370994+0.0012252761516720057j), (0.0021618343889713287+0.002975527662783861j), (0.001581604708917439+0.004867727868258953j), (-1.9433857190165327e-08+0.006262138020247221j), (-0.002156207337975502+0.006636050995439291j), (-0.004206591751426458+0.005789835937321186j), (-0.005443155765533447+0.0039546554908156395j), (-0.005390032194554806+0.0017513061175122857j), (-0.004003935027867556-1.4987321605985926e-08j), (-0.0017344148363918066-0.0005635529523715377j), (0.0005928258178755641+0.00043071681284345686j), (0.00204398762434721+0.002813332248479128j), (0.001911965780891478+0.0058845109306275845j), (-3.778454527036956e-08+0.00862088892608881j), (-0.0032564832363277674+0.010022270493209362j), (-0.006889956537634134+0.00948311947286129j), (-0.00970806647092104+0.007053252309560776j), (-0.010712412185966969+0.0034806157927960157j), (-0.009484823793172836-4.7639080236194786e-08j), (-0.006394779775291681-0.0020778262987732887j), (-0.0025349711067974567-0.0018417846877127886j), (0.000615742988884449+0.0008475071517750621j), (0.0017017932841554284+0.0052376799285411835j), (-5.595675389713506e-08+0.00988212414085865j), (-0.004259895998984575+0.01311035268008709j), (-0.009896648116409779+0.013621398247778416j), (-0.015129807405173779+0.01099230907857418j), (-0.018181191757321358+0.005907302722334862j), (-0.017926499247550964-1.1297601076876163e-07j), (-0.014361385256052017-0.004666399210691452j), (-0.008695588447153568-0.0063178022392094135j), (-0.003010083921253681-0.004143083933740854j), (0.00043256222852505744+0.001331320614553988j), (-5.779264355965097e-08+0.00832514651119709j), (-0.004663750063627958+0.014353201724588871j), (-0.012406211346387863+0.017075426876544952j), (-0.02086781896650791+0.015161124989390373j), (-0.027246525511145592+0.008852709084749222j), (-0.029283737763762474-2.220203754177419e-07j), (-0.026128513738512993-0.008489890955388546j), (-0.018755778670310974-0.013627096079289913j), (-0.0097518814727664-0.013422537595033646j), (-0.0024975789710879326-0.0076869698241353035j), (-1.4489224042790738e-08+0.0017623677849769592j), (-0.003772038733586669+0.011608811095356941j), (-0.013169700279831886+0.018126213923096657j), (-0.025462869554758072+0.018499521538615227j), (-0.03666809946298599+0.01191383320838213j), (-0.04289836809039116-3.801314676366019e-07j), (-0.04177878797054291-0.013575167395174503j), (-0.03342019021511078-0.024281654506921768j), (-0.020565278828144073-0.028306229040026665j), (-0.007793128956109285-0.023985549807548523j), (1.1943579636408685e-07-0.012570907361805439j), (-0.0006511782994493842+0.0020040550734847784j), (-0.010420617647469044+0.014342455193400383j), (-0.026734502986073494+0.01942335069179535j), (-0.044454749673604965+0.014443730935454369j), (-0.05753890424966812-5.834863259224221e-07j), (-0.06115259602665901-0.019870376214385033j), (-0.05350785329937935-0.03887658193707466j), (-0.03674512356519699-0.05057644471526146j), (-0.016468781977891922-0.05068754032254219j), (4.1833675368252443e-07-0.038805004209280014j), (0.006127998232841492-0.018859339877963066j), (-0.0014152192743495107+0.0019478369504213333j), (-0.021291259676218033+0.015468643046915531j), (-0.04758996516466141+0.015462322160601616j), (-0.07157225906848907-8.173725518645369e-07j), (-0.08457329124212265-0.027480605989694595j), (-0.08112525194883347-0.058942392468452454j), (-0.0612054206430912-0.08424412459135056j), (-0.030734829604625702-0.09459591656923294j), (1.0353140851293574e-06-0.08584693819284439j), (0.01963215321302414-0.06041904538869858j), (0.019676238298416138-0.027081318199634552j), (-0.002136311726644635+0.00155208061914891j), (-0.04041650518774986+0.013131557032465935j), (-0.08323709666728973-1.0570909125817707e-06j), (-0.11567769944667816-0.03758760541677475j), (-0.12480130046606064-0.09067592769861221j), (-0.10448191314935684-0.14381097257137299j), (-0.05840231105685234-0.1797519028186798j), (2.4727753498154925e-06-0.18537220358848572j), (0.05097254738211632-0.15687018632888794j), (0.0744461864233017-0.10246345400810242j), (0.05697187781333923-0.04139129817485809j), (-0.0026515291538089514+0.0008614934631623328j), (-0.09096294641494751-1.2715959201159421e-06j), (-0.18176671862602234-0.059062425047159195j), (-0.24225066602230072-0.17601068317890167j), (-0.24183933436870575-0.3328733444213867j), (-0.1613808572292328-0.49670347571372986j), (9.014518582262099e-06-0.6268522143363953j), (0.22260496020317078-0.6850740313529968j), (0.4692038595676422-0.6457841396331787j), (0.693172037601471-0.5036036968231201j), (0.8494231700897217-0.27598080039024353j), (0.9054469466209412+1.3060460332781076e-05j), (0.8494152426719666+0.27600526809692383j), (0.6931574940681458+0.5036236643791199j), (0.4691852033138275+0.6457976698875427j), (0.22258518636226654+0.6850805282592773j), (-9.069320185517427e-06+0.6268522143363953j), (-0.16139519214630127+0.49669885635375977j), (-0.24184894561767578+0.332866370677948j), (-0.24225571751594543+0.17600375413894653j), (-0.18176841735839844+0.05905722454190254j), (-0.09096294641494751-1.3308748521012603e-06j), (-0.002651504473760724-0.0008615693659521639j), (0.05697069689631462+0.04139292985200882j), (0.07444325089454651+0.10246558487415314j), (0.05096805840730667+0.15687164664268494j), (-2.8307658794801682e-06+0.18537220358848572j), (-0.05840745195746422+0.1797502338886261j), (-0.10448602586984634+0.14380797743797302j), (-0.12480389326810837+0.09067235887050629j), (-0.11567877233028412+0.03758429363369942j), (-0.08323709666728973-1.3243413832242368e-06j), (-0.04041612520813942-0.013132712803781033j), (-0.0021362672559916973-0.001552141853608191j), (0.019675465300679207+0.02708188258111477j), (0.019630424678325653+0.060419611632823944j), (-1.4207865888238302e-06+0.08584693819284439j), (-0.030737536028027534+0.0945950374007225j), (-0.06120783090591431+0.08424237370491028j), (-0.08112693578004837+0.05894006788730621j), (-0.08457407355308533+0.027478186413645744j), (-0.07157225906848907-1.2303263474677806e-06j), (-0.04758952185511589-0.015463683754205704j), (-0.021290818229317665-0.01546925213187933j), (-0.0014151635114103556-0.0019478773465380073j), (0.006127458531409502+0.018859514966607094j), (-6.918833150848513e-07+0.038805004209280014j), (-0.016470232978463173+0.05068706348538399j), (-0.03674657270312309+0.05057539418339729j), (-0.05350896716117859+0.03887505084276199j), (-0.061153165996074677+0.019868627190589905j), (-0.05753890424966812-1.062715000443859e-06j), (-0.04445433244109154-0.014445002190768719j), (-0.026733947917819023-0.019424114376306534j), (-0.010420206934213638-0.01434275321662426j), (-0.0006511209649033844-0.0020040736999362707j), (-2.4022074285312556e-07+0.012570907361805439j), (-0.007793815340846777+0.023985326290130615j), (-0.02056608907878399+0.028305640444159508j), (-0.03342088311910629+0.024280700832605362j), (-0.04177917540073395+0.013573972508311272j), (-0.04289836809039116-8.472006811643951e-07j), (-0.03666776046156883-0.011914882808923721j), (-0.02546234056353569-0.018500251695513725j), (-0.013169181533157825-0.0181265901774168j), (-0.003771706484258175-0.011608920060098171j), (3.593252273503822e-08-0.0017623677849769592j), (-0.0024977989960461855+0.007686898112297058j), (-0.009752265177667141+0.013422259129583836j), (-0.018756167963147163+0.013626557774841785j), (-0.026128755882382393+0.008489144034683704j), (-0.029283737763762474-6.157940788398264e-07j), (-0.027246274054050446-0.008853488601744175j), (-0.02086738497018814-0.015161721967160702j), (-0.012405723333358765-0.017075780779123306j), (-0.004663339350372553-0.014353334903717041j), (1.803917086817819e-07-0.00832514651119709j), (0.0004326003254391253-0.0013313082745298743j), (-0.0030102026648819447+0.004142997786402702j), (-0.008695769123733044+0.006317553576081991j), (-0.014361519366502762+0.004665988031774759j), (-0.017926499247550964-3.99905246695198e-07j), (-0.01818102039396763-0.0059078228659927845j), (-0.015129493549466133-0.010992742143571377j), (-0.00989625882357359-0.013621682301163673j), (-0.004259520210325718-0.01311047375202179j), (2.267730963012582e-07-0.00988212414085865j), (0.0017019431106746197-0.005237631034106016j), (0.0006157672614790499-0.0008474895730614662j), (-0.0025350237265229225+0.0018417120445519686j), (-0.006394839379936457+0.002077643293887377j), (-0.009484823793172836-2.2372390162672673e-07j), (-0.010712312534451485-0.003480922430753708j), (-0.009707865305244923-0.0070535303093492985j), (-0.006889685522764921-0.009483315981924534j), (-0.0032561966218054295-0.010022364556789398j), (2.0886106710804597e-07-0.00862088892608881j), (0.0019121341174468398-0.005884455982595682j), (0.002044068183749914-0.002813273575156927j), (0.0005928382161073387-0.0004306998453103006j), (-0.0017344309017062187+0.0005635033012367785j), (-0.004003935027867556-9.956617930129141e-08j), (-0.005389982368797064-0.0017514603678137064j), (-0.0054430426098406315-0.0039548110216856j), (-0.004206425976008177-0.0057899560779333115j), (-0.002156017581000924-0.006636112462729216j), (1.5972734956903878e-07-0.006262138020247221j), (0.001581743941642344-0.004867682699114084j), (0.002161919604986906-0.0029754657298326492j), (0.0016864733770489693-0.0012252279557287693j), (0.00045623304322361946-0.00014822596858721226j), (-0.0010078998748213053-2.6353152549063452e-08j), (-0.0021604441571980715-0.0007020335760898888j), (-0.002615791279822588-0.001900581526570022j), (-0.0022609378211200237-0.0031120753847062588j), (-0.0012660869397222996-0.0038969432935118675j), (9.955456192756174e-08-0.004001548979431391j), (0.0011126416502520442-0.0034240675158798695j), (0.00173674407415092-0.002390296896919608j), (0.001729757757857442-0.0012566758086904883j), (0.0011695914436131716-0.00037999043706804514j), (0.00030785080161876976+7.855971873027556e-09j), (-0.0005292105488479137-0.0001719659339869395j), (-0.0010543313110247254-0.0007660579867660999j), (-0.0011091971537098289-0.0015267619164660573j), (-0.0007041479693725705-0.002167336642742157j), (6.44930295834456e-08-0.0024654690641909838j), (0.0007570176385343075-0.0023296521976590157j), (0.0013210009783506393-0.0018181008053943515j), (0.001525976462289691-0.0011086248559877276j), (0.001333187916316092-0.0004331397358328104j), (0.0008352960576303303+2.2384497810890025e-08j), (0.00021911432850174606+7.12010805727914e-05j), (-0.0002987771586049348-0.0002170866500819102j), (-0.0005422868416644633-0.0007464364753104746j), (-0.0004303497262299061-0.0013246034504845738j)]
        self.audio_decim = audio_decim = 4
        self.audio_bpf_voice = audio_bpf_voice = [0.00010484782978892326, 0.0006733667105436325, 0.0012453071540221572, -5.170056101633236e-05, 0.0007232390344142914, 0.0010631791083142161, -0.0002777926856651902, 0.0007119302172213793, 0.0007864224025979638, -0.0005736812017858028, 0.0006422591395676136, 0.000407339190132916, -0.000931795802898705, 0.0005209980881772935, -7.491885480703786e-05, -0.0013313262024894357, 0.0003631639701779932, -0.0006478609284386039, -0.001733568962663412, 0.00019555391918402165, -0.0012805506121367216, -0.0020798384211957455, 5.785676694358699e-05, -0.001921691931784153, -0.002293510129675269, -0.0, -0.0025022507179528475, -0.0022871263790875673, 7.509803253924474e-05, -0.0029431248549371958, -0.0019745188765227795, 0.00032835223828442395, -0.003167291870340705, -0.0012867861660197377, 0.0007833336130715907, -0.0031147680711001158, -0.00018986356735695153, 0.0014280418399721384, -0.0027577613946050406, 0.0012993660056963563, 0.0022037620656192303, -0.0021128866355866194, 0.003101835958659649, 0.0029998612590134144, -0.0012472968082875013, 0.005073074251413345, 0.0036571728996932507, -0.0002762487856671214, 0.007010253611952066, 0.003981520887464285, 0.0006491896347142756, 0.008670316077768803, 0.0037673632614314556, 0.0013639124808833003, 0.009798168204724789, 0.0028296750970184803, 0.0017178220441564918, 0.010162015445530415, 0.0010403660126030445, 0.0016082144575193524, 0.00959125254303217, -0.0016359175788238645, 0.001010289997793734, 0.008011149242520332, -0.0051126196049153805, 1.787414086903047e-16, 0.005468277260661125, -0.009164649061858654, -0.0012362184934318066, 0.002141212346032262, -0.013429222628474236, -0.0024089717771857977, -0.0016673558857291937, -0.017427105456590652, -0.003152701538056135, -0.005558572709560394, -0.020604563876986504, -0.0030709540005773306, -0.009083972312510014, -0.02239312417805195, -0.001796343014575541, -0.011806134134531021, -0.022281426936388016, 0.0009414036176167428, -0.013366233557462692, -0.01989072747528553, 0.005248058587312698, -0.013549352064728737, -0.015044193714857101, 0.011007994413375854, -0.01233765296638012, -0.007819755002856255, 0.017847351729869843, -0.00994210597127676, 0.0014225482009351254, 0.025125138461589813, -0.006805463694036007, 0.012045271694660187, 0.03195716813206673, -0.003572393674403429, 0.023173214867711067, 0.037273649126291275, -0.0010267094476148486, 0.033766478300094604, 0.039906688034534454, -0.0, 0.04272090643644333, 0.038699373602867126, -0.0012599312467500567, 0.04898570477962494, 0.032624129205942154, -0.005389456171542406, 0.05168527737259865, 0.020894940942525864, -0.012669412419199944, 0.050230395048856735, 0.0030563923064619303, -0.02297583408653736, 0.04440478980541229, -0.020968826487660408, -0.03569885343313217, 0.0344148725271225, -0.05089372396469116, -0.04968051239848137, 0.020894691348075867, -0.08616858720779419, -0.06314899772405624, 0.004863107576966286, -0.12621940672397614, -0.07358153164386749, -0.012364046648144722, -0.17094968259334564, -0.07729928195476532, -0.029298366978764534, -0.2219126969575882, -0.0681382343173027, -0.044426750391721725, -0.2858123183250427, -0.03232856094837189, -0.05636638402938843, -0.3900148868560791, 0.0803973600268364, -0.06400923430919647, -0.7361559867858887, 0.9085361361503601, 2.5989344120025635, 0.9085361361503601, -0.7361559867858887, -0.06400923430919647, 0.0803973600268364, -0.3900148868560791, -0.05636638402938843, -0.03232856094837189, -0.2858123183250427, -0.044426750391721725, -0.0681382343173027, -0.2219126969575882, -0.029298366978764534, -0.07729928195476532, -0.17094968259334564, -0.012364046648144722, -0.07358153164386749, -0.12621940672397614, 0.004863107576966286, -0.06314899772405624, -0.08616858720779419, 0.020894691348075867, -0.04968051239848137, -0.05089372396469116, 0.0344148725271225, -0.03569885343313217, -0.020968826487660408, 0.04440478980541229, -0.02297583408653736, 0.0030563923064619303, 0.050230395048856735, -0.012669412419199944, 0.020894940942525864, 0.05168527737259865, -0.005389456171542406, 0.032624129205942154, 0.04898570477962494, -0.0012599312467500567, 0.038699373602867126, 0.04272090643644333, 0.0, 0.039906688034534454, 0.033766478300094604, -0.0010267094476148486, 0.037273649126291275, 0.023173214867711067, -0.003572393674403429, 0.03195716813206673, 0.012045271694660187, -0.006805463694036007, 0.025125138461589813, 0.0014225482009351254, -0.00994210597127676, 0.017847351729869843, -0.007819755002856255, -0.01233765296638012, 0.011007994413375854, -0.015044193714857101, -0.013549352064728737, 0.005248058587312698, -0.01989072747528553, -0.013366233557462692, 0.0009414036176167428, -0.022281426936388016, -0.011806134134531021, -0.001796343014575541, -0.02239312417805195, -0.009083972312510014, -0.0030709540005773306, -0.020604563876986504, -0.005558572709560394, -0.003152701538056135, -0.017427105456590652, -0.0016673558857291937, -0.0024089717771857977, -0.013429222628474236, 0.002141212346032262, -0.0012362184934318066, -0.009164649061858654, 0.005468277260661125, 1.787414086903047e-16, -0.0051126196049153805, 0.008011149242520332, 0.001010289997793734, -0.0016359175788238645, 0.00959125254303217, 0.0016082144575193524, 0.0010403660126030445, 0.010162015445530415, 0.0017178220441564918, 0.0028296750970184803, 0.009798168204724789, 0.0013639124808833003, 0.0037673632614314556, 0.008670316077768803, 0.0006491896347142756, 0.003981520887464285, 0.007010253611952066, -0.0002762487856671214, 0.0036571728996932507, 0.005073074251413345, -0.0012472968082875013, 0.0029998612590134144, 0.003101835958659649, -0.0021128866355866194, 0.0022037620656192303, 0.0012993660056963563, -0.0027577613946050406, 0.0014280418399721384, -0.00018986356735695153, -0.0031147680711001158, 0.0007833336130715907, -0.0012867861660197377, -0.003167291870340705, 0.00032835223828442395, -0.0019745188765227795, -0.0029431248549371958, 7.509803253924474e-05, -0.0022871263790875673, -0.0025022507179528475, 0.0, -0.002293510129675269, -0.001921691931784153, 5.785676694358699e-05, -0.0020798384211957455, -0.0012805506121367216, 0.00019555391918402165, -0.001733568962663412, -0.0006478609284386039, 0.0003631639701779932, -0.0013313262024894357, -7.491885480703786e-05, 0.0005209980881772935, -0.000931795802898705, 0.000407339190132916, 0.0006422591395676136, -0.0005736812017858028, 0.0007864224025979638, 0.0007119302172213793, -0.0002777926856651902, 0.0010631791083142161, 0.0007232390344142914, -5.170056101633236e-05, 0.0012453071540221572, 0.0006733667105436325, 0.00010484782978892326]
        self.ale_chan_21AHFN = ale_chan_21AHFN = 21096000
        self.ale_chan_18AHFN = ale_chan_18AHFN = 18106000
        self.ale_chan_14AHFN = ale_chan_14AHFN = 14109000
        self.ale_chan_10AHFN = ale_chan_10AHFN = 10145500
        self.ale_chan_07AHFN = ale_chan_07AHFN = 7102000
        self.ale_chan_05AHFN = ale_chan_05AHFN = 5357000
        self.ale_chan_03AHFN = ale_chan_03AHFN = 3596000
        self.ale_chan_01AHFN = ale_chan_01AHFN = 1843000

        ##################################################
        # Blocks
        ##################################################
        self.k6drs_sideband_selector_0 = k6drs.sideband_selector()
        self.k6drs_portaudio_0 = k6drs.portaudio(8000)
        self.k6drs_command_decoder_0 = k6drs.command_decoder(center_freq_0)
        self.k6drs_baseband_io_0 = k6drs.baseband_io('192.168.0.225', '127.0.0.1', 12347)
        self.k6drs_band_selector_0 = k6drs.band_selector(640000)
        self.k6drs_ale_monitor_0_2 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0_1_0 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0_1 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0_0_1 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0_0_0_0 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0_0_0 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0_0 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_monitor_0 = k6drs.ale_monitor(5, 5, '')
        self.k6drs_ale_2g_tx_phy_fec_sublayers_0 = k6drs.ale_2g_tx_phy_fec_sublayers()
        (self.k6drs_ale_2g_tx_phy_fec_sublayers_0).set_max_output_buffer(8192)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_21AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_18AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_14AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_10AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_2 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_07AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_1 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_05AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_03AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_01AHFN, 25)
        self.freq_xlating_fir_filter_xxx_0_3 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), 0, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_2 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_10AHFN - center_freq_4, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_18AHFN - center_freq_6, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_05AHFN - center_freq_2, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_1 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_14AHFN - center_freq_5, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_21AHFN - center_freq_7, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_07AHFN - center_freq_3, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_03AHFN - center_freq_1, samp_rate)
        self.freq_xlating_fir_filter_xxx_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_01AHFN - center_freq_0, samp_rate)
        self.fir_filter_xxx_0 = filter.fir_filter_fff(1, (audio_bpf_voice))
        self.fir_filter_xxx_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_voice_0), 1)
        self.fft_filter_xxx_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0.declare_sample_delay(0)
        self.blocks_udp_source_0 = blocks.udp_source(gr.sizeof_gr_complex*1, '127.0.0.1', 1234, 1472, True)
        self.blocks_udp_sink_0 = blocks.udp_sink(gr.sizeof_short*1, '127.0.0.1', 62345, 1472, False)
        self.blocks_socket_pdu_1 = blocks.socket_pdu("UDP_SERVER", '127.0.0.1', '54321', 10000, False)
        self.blocks_socket_pdu_0 = blocks.socket_pdu("UDP_CLIENT", '127.0.0.1', '12345', 1500, False)
        self.blocks_short_to_float_0 = blocks.short_to_float(1, 32768)
        (self.blocks_short_to_float_0).set_max_output_buffer(8192)
        self.blocks_float_to_short_0 = blocks.float_to_short(1, 32767)
        self.blocks_complex_to_real_0_0_1_2 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_0 = blocks.complex_to_real(1)
        self.blocks_add_xx_0 = blocks.add_vff(1)

        ##################################################
        # Connections
        ##################################################
        self.msg_connect((self.blocks_socket_pdu_1, 'pdus'), (self.k6drs_command_decoder_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0, 'message_event'), (self.k6drs_ale_monitor_0_2, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_0, 'message_event'), (self.k6drs_ale_monitor_0_0_1, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_1, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_1, 'message_event'), (self.k6drs_ale_monitor_0_1_0, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_2, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_2, 'message_event'), (self.k6drs_ale_monitor_0_0_0_0, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3, 'message_event'), (self.k6drs_ale_monitor_0, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0, 'message_event'), (self.k6drs_ale_monitor_0_0, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1, 'message_event'), (self.k6drs_ale_monitor_0_1, 'message_event'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2, 'message_event'), (self.k6drs_ale_monitor_0_0_0, 'message_event'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.freq_xlating_fir_filter_xxx_0_3, 'freq'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_ale_2g_tx_phy_fec_sublayers_0, 'ale_tx_message'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_band_selector_0, 'control_message'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_portaudio_0, 'cmd'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_sideband_selector_0, 'control_message'))
        self.msg_connect((self.k6drs_portaudio_0, 'tx_complete_event'), (self.blocks_socket_pdu_0, 'pdus'))
        self.connect((self.blocks_add_xx_0, 0), (self.blocks_float_to_short_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_0, 0), (self.fir_filter_xxx_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1, 0), (self.k6drs_ale_monitor_0_2, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0, 0), (self.k6drs_ale_monitor_0_0_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_2, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0, 0), (self.k6drs_ale_monitor_0_0_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0_0, 0), (self.k6drs_ale_monitor_0_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_1, 0), (self.k6drs_ale_monitor_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1, 0), (self.k6drs_ale_monitor_0_1_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1_0, 0), (self.k6drs_ale_monitor_0_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_2, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_2, 0), (self.k6drs_ale_monitor_0, 0))
        self.connect((self.blocks_float_to_short_0, 0), (self.blocks_udp_sink_0, 0))
        self.connect((self.blocks_short_to_float_0, 0), (self.k6drs_portaudio_0, 0))
        self.connect((self.blocks_udp_source_0, 0), (self.k6drs_baseband_io_0, 0))
        self.connect((self.fft_filter_xxx_0_0_0, 0), (self.blocks_complex_to_real_0_0_1, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0, 0), (self.blocks_complex_to_real_0_0_1_1, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0_0, 0), (self.blocks_complex_to_real_0_0_1_1_0, 0))
        self.connect((self.fft_filter_xxx_0_0_0_1, 0), (self.blocks_complex_to_real_0_0_1_2, 0))
        self.connect((self.fft_filter_xxx_0_0_1, 0), (self.blocks_complex_to_real_0_0_1_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0, 0), (self.blocks_complex_to_real_0_0_1_0_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0_0, 0), (self.blocks_complex_to_real_0_0_1_0_0_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_1, 0), (self.blocks_complex_to_real_0_0_1_0_1, 0))
        self.connect((self.fft_filter_xxx_0_1, 0), (self.blocks_complex_to_real_0_0_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_add_xx_0, 8))
        self.connect((self.freq_xlating_fir_filter_xxx_0, 0), (self.fft_filter_xxx_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0, 0), (self.fft_filter_xxx_0_0_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0, 0), (self.fft_filter_xxx_0_0_1_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0_0, 0), (self.fft_filter_xxx_0_0_1_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_1, 0), (self.fft_filter_xxx_0_0_1_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1, 0), (self.fft_filter_xxx_0_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1_0, 0), (self.fft_filter_xxx_0_0_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_2, 0), (self.fft_filter_xxx_0_0_0_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_3, 0), (self.k6drs_sideband_selector_0, 0))
        self.connect((self.k6drs_ale_2g_tx_phy_fec_sublayers_0, 0), (self.blocks_short_to_float_0, 0))
        self.connect((self.k6drs_ale_monitor_0, 0), (self.blocks_add_xx_0, 4))
        self.connect((self.k6drs_ale_monitor_0_0, 0), (self.blocks_add_xx_0, 5))
        self.connect((self.k6drs_ale_monitor_0_0_0, 0), (self.blocks_add_xx_0, 7))
        self.connect((self.k6drs_ale_monitor_0_0_0_0, 0), (self.blocks_add_xx_0, 3))
        self.connect((self.k6drs_ale_monitor_0_0_1, 0), (self.blocks_add_xx_0, 1))
        self.connect((self.k6drs_ale_monitor_0_1, 0), (self.blocks_add_xx_0, 6))
        self.connect((self.k6drs_ale_monitor_0_1_0, 0), (self.blocks_add_xx_0, 2))
        self.connect((self.k6drs_ale_monitor_0_2, 0), (self.blocks_add_xx_0, 0))
        self.connect((self.k6drs_band_selector_0, 0), (self.freq_xlating_fir_filter_xxx_0_3, 0))
        self.connect((self.k6drs_baseband_io_0, 0), (self.freq_xlating_fir_filter_xxx_0, 0))
        self.connect((self.k6drs_baseband_io_0, 1), (self.freq_xlating_fir_filter_xxx_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 3), (self.freq_xlating_fir_filter_xxx_0_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 7), (self.freq_xlating_fir_filter_xxx_0_0_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 5), (self.freq_xlating_fir_filter_xxx_0_0_1, 0))
        self.connect((self.k6drs_baseband_io_0, 2), (self.freq_xlating_fir_filter_xxx_0_1, 0))
        self.connect((self.k6drs_baseband_io_0, 6), (self.freq_xlating_fir_filter_xxx_0_1_0, 0))
        self.connect((self.k6drs_baseband_io_0, 4), (self.freq_xlating_fir_filter_xxx_0_2, 0))
        self.connect((self.k6drs_baseband_io_0, 0), (self.k6drs_band_selector_0, 0))
        self.connect((self.k6drs_baseband_io_0, 1), (self.k6drs_band_selector_0, 1))
        self.connect((self.k6drs_baseband_io_0, 2), (self.k6drs_band_selector_0, 2))
        self.connect((self.k6drs_baseband_io_0, 3), (self.k6drs_band_selector_0, 3))
        self.connect((self.k6drs_baseband_io_0, 4), (self.k6drs_band_selector_0, 4))
        self.connect((self.k6drs_baseband_io_0, 5), (self.k6drs_band_selector_0, 5))
        self.connect((self.k6drs_baseband_io_0, 6), (self.k6drs_band_selector_0, 6))
        self.connect((self.k6drs_baseband_io_0, 7), (self.k6drs_band_selector_0, 7))
        self.connect((self.k6drs_sideband_selector_0, 0), (self.fft_filter_xxx_0_1, 0))

    def get_samp_rate_downconv(self):
        return self.samp_rate_downconv

    def set_samp_rate_downconv(self, samp_rate_downconv):
        self.samp_rate_downconv = samp_rate_downconv

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate

    def get_ddc_decim(self):
        return self.ddc_decim

    def set_ddc_decim(self, ddc_decim):
        self.ddc_decim = ddc_decim

    def get_channel_filter_taps(self):
        return self.channel_filter_taps

    def set_channel_filter_taps(self, channel_filter_taps):
        self.channel_filter_taps = channel_filter_taps
        self.freq_xlating_fir_filter_xxx_0_3.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_2.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_1.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0.set_taps((self.channel_filter_taps))

    def get_center_freq_7(self):
        return self.center_freq_7

    def set_center_freq_7(self, center_freq_7):
        self.center_freq_7 = center_freq_7
        self.freq_xlating_fir_filter_xxx_0_0_0_0.set_center_freq(self.ale_chan_21AHFN - self.center_freq_7)

    def get_center_freq_6(self):
        return self.center_freq_6

    def set_center_freq_6(self, center_freq_6):
        self.center_freq_6 = center_freq_6
        self.freq_xlating_fir_filter_xxx_0_1_0.set_center_freq(self.ale_chan_18AHFN - self.center_freq_6)

    def get_center_freq_5(self):
        return self.center_freq_5

    def set_center_freq_5(self, center_freq_5):
        self.center_freq_5 = center_freq_5
        self.freq_xlating_fir_filter_xxx_0_0_1.set_center_freq(self.ale_chan_14AHFN - self.center_freq_5)

    def get_center_freq_4(self):
        return self.center_freq_4

    def set_center_freq_4(self, center_freq_4):
        self.center_freq_4 = center_freq_4
        self.freq_xlating_fir_filter_xxx_0_2.set_center_freq(self.ale_chan_10AHFN - self.center_freq_4)

    def get_center_freq_3(self):
        return self.center_freq_3

    def set_center_freq_3(self, center_freq_3):
        self.center_freq_3 = center_freq_3
        self.freq_xlating_fir_filter_xxx_0_0_0.set_center_freq(self.ale_chan_07AHFN - self.center_freq_3)

    def get_center_freq_2(self):
        return self.center_freq_2

    def set_center_freq_2(self, center_freq_2):
        self.center_freq_2 = center_freq_2
        self.freq_xlating_fir_filter_xxx_0_1.set_center_freq(self.ale_chan_05AHFN - self.center_freq_2)

    def get_center_freq_1(self):
        return self.center_freq_1

    def set_center_freq_1(self, center_freq_1):
        self.center_freq_1 = center_freq_1
        self.freq_xlating_fir_filter_xxx_0_0.set_center_freq(self.ale_chan_03AHFN - self.center_freq_1)

    def get_center_freq_0(self):
        return self.center_freq_0

    def set_center_freq_0(self, center_freq_0):
        self.center_freq_0 = center_freq_0
        self.freq_xlating_fir_filter_xxx_0.set_center_freq(self.ale_chan_01AHFN - self.center_freq_0)

    def get_audio_usb_taps_voice_0(self):
        return self.audio_usb_taps_voice_0

    def set_audio_usb_taps_voice_0(self, audio_usb_taps_voice_0):
        self.audio_usb_taps_voice_0 = audio_usb_taps_voice_0
        self.fft_filter_xxx_0_1.set_taps((self.audio_usb_taps_voice_0))

    def get_audio_usb_taps_0(self):
        return self.audio_usb_taps_0

    def set_audio_usb_taps_0(self, audio_usb_taps_0):
        self.audio_usb_taps_0 = audio_usb_taps_0
        self.fft_filter_xxx_0_0_1_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0.set_taps((self.audio_usb_taps_0))

    def get_audio_decim(self):
        return self.audio_decim

    def set_audio_decim(self, audio_decim):
        self.audio_decim = audio_decim

    def get_audio_bpf_voice(self):
        return self.audio_bpf_voice

    def set_audio_bpf_voice(self, audio_bpf_voice):
        self.audio_bpf_voice = audio_bpf_voice
        self.fir_filter_xxx_0.set_taps((self.audio_bpf_voice))

    def get_ale_chan_21AHFN(self):
        return self.ale_chan_21AHFN

    def set_ale_chan_21AHFN(self, ale_chan_21AHFN):
        self.ale_chan_21AHFN = ale_chan_21AHFN
        self.freq_xlating_fir_filter_xxx_0_0_0_0.set_center_freq(self.ale_chan_21AHFN - self.center_freq_7)

    def get_ale_chan_18AHFN(self):
        return self.ale_chan_18AHFN

    def set_ale_chan_18AHFN(self, ale_chan_18AHFN):
        self.ale_chan_18AHFN = ale_chan_18AHFN
        self.freq_xlating_fir_filter_xxx_0_1_0.set_center_freq(self.ale_chan_18AHFN - self.center_freq_6)

    def get_ale_chan_14AHFN(self):
        return self.ale_chan_14AHFN

    def set_ale_chan_14AHFN(self, ale_chan_14AHFN):
        self.ale_chan_14AHFN = ale_chan_14AHFN
        self.freq_xlating_fir_filter_xxx_0_0_1.set_center_freq(self.ale_chan_14AHFN - self.center_freq_5)

    def get_ale_chan_10AHFN(self):
        return self.ale_chan_10AHFN

    def set_ale_chan_10AHFN(self, ale_chan_10AHFN):
        self.ale_chan_10AHFN = ale_chan_10AHFN
        self.freq_xlating_fir_filter_xxx_0_2.set_center_freq(self.ale_chan_10AHFN - self.center_freq_4)

    def get_ale_chan_07AHFN(self):
        return self.ale_chan_07AHFN

    def set_ale_chan_07AHFN(self, ale_chan_07AHFN):
        self.ale_chan_07AHFN = ale_chan_07AHFN
        self.freq_xlating_fir_filter_xxx_0_0_0.set_center_freq(self.ale_chan_07AHFN - self.center_freq_3)

    def get_ale_chan_05AHFN(self):
        return self.ale_chan_05AHFN

    def set_ale_chan_05AHFN(self, ale_chan_05AHFN):
        self.ale_chan_05AHFN = ale_chan_05AHFN
        self.freq_xlating_fir_filter_xxx_0_1.set_center_freq(self.ale_chan_05AHFN - self.center_freq_2)

    def get_ale_chan_03AHFN(self):
        return self.ale_chan_03AHFN

    def set_ale_chan_03AHFN(self, ale_chan_03AHFN):
        self.ale_chan_03AHFN = ale_chan_03AHFN
        self.freq_xlating_fir_filter_xxx_0_0.set_center_freq(self.ale_chan_03AHFN - self.center_freq_1)

    def get_ale_chan_01AHFN(self):
        return self.ale_chan_01AHFN

    def set_ale_chan_01AHFN(self, ale_chan_01AHFN):
        self.ale_chan_01AHFN = ale_chan_01AHFN
        self.freq_xlating_fir_filter_xxx_0.set_center_freq(self.ale_chan_01AHFN - self.center_freq_0)


def main(top_block_cls=ale2g_parallel_8_v0_2, options=None):
    if gr.enable_realtime_scheduling() != gr.RT_OK:
        print "Error: failed to enable real-time scheduling."

    tb = top_block_cls()
    tb.start()
    try:
        raw_input('Press Enter to quit: ')
    except EOFError:
        pass
    tb.stop()
    tb.wait()


if __name__ == '__main__':
    main()
