#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: ALE2G Parallel V0.2 8-channels
# Author: Devin Butterfield / K6DRS
# Generated: Wed Jul 25 00:04:20 2018
##################################################

from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import filter
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from optparse import OptionParser
import k6drs


class ale2g_parallel_18_v0_2(gr.top_block):

    def __init__(self):
        gr.top_block.__init__(self, "ALE2G Parallel V0.2 8-channels")

        ##################################################
        # Variables
        ##################################################
        self.samp_rate_downconv = samp_rate_downconv = 8000
        self.samp_rate = samp_rate = 640000
        self.ddc_decim = ddc_decim = 20
        self.channel_filter_taps = channel_filter_taps = [(0.0002493603387847543-0j), (0.00022811056987848133+0j), (0.0002059282414847985+0j), (0.00018199831538368016+0j), (0.0001553735783090815+0j), (0.0001250018394785002+0j), (8.975758828455582e-05+0j), (4.8477591917617247e-05+0j), (-1.308664611038187e-19-0j), (-5.6793996918713674e-05-0j), (-0.00012293666077312082-0j), (-0.00019932918075937778-0j), (-0.0002866971481125802-0j), (-0.00038554679485969245-0j), (-0.0004961232771165669-0j), (-0.0006183711811900139-0j), (-0.0007518998463638127-0j), (-0.0008959518163464963-0j), (-0.0010493781883269548-0j), (-0.0012106189969927073-0j), (-0.0013776910491287708-0j), (-0.001548183267004788-0j), (-0.0017192597733810544-0j), (-0.001887670368887484-0j), (-0.002049771137535572-0j), (-0.0022015515714883804-0j), (-0.0023386715911328793-0j), (-0.002456504851579666-0j), (-0.002550191478803754-0j), (-0.002614697441458702-0j), (-0.002644877415150404-0j), (-0.0026355483569204807-0j), (-0.0025815630797296762-0j), (-0.0024778901133686304-0j), (-0.002319693798199296-0j), (-0.002102416940033436-0j), (-0.0018218634650111198-0j), (-0.0014742778148502111-0j), (-0.0010564241092652082-0j), (-0.0005656589055433869-0j), (7.529256946386964e-19+0j), (0.0006418122793547809+0j), (0.0013602608814835548+0j), (0.002155006630346179+0j), (0.0030248539987951517+0j), (0.003967725206166506+0j), (0.004980647005140781+0j), (0.006059750914573669+0j), (0.007200280204415321+0j), (0.008396615274250507+0j), (0.009642308577895164+0j), (0.010930129326879978+0j), (0.012252125889062881+0j), (0.013599691912531853+0j), (0.014963650144636631+0j), (0.01633433625102043+0j), (0.01770169846713543+0j), (0.019055413082242012+0j), (0.02038497105240822+0j), (0.021679820492863655+0j), (0.022929463535547256+0j), (0.024123582988977432+0j), (0.02525216154754162+0j), (0.02630559541285038+0j), (0.027274807915091515+0j), (0.028151359409093857+0j), (0.02892754226922989+0j), (0.029596475884318352+0j), (0.03015219047665596+0j), (0.03058970533311367+0j), (0.030905073508620262+0j), (0.031095443293452263+0j), (0.031159091740846634+0j), (0.031095443293452263+0j), (0.030905073508620262+0j), (0.03058970533311367+0j), (0.03015219047665596+0j), (0.029596475884318352+0j), (0.02892754226922989+0j), (0.028151359409093857+0j), (0.027274807915091515+0j), (0.02630559541285038+0j), (0.02525216154754162+0j), (0.024123582988977432+0j), (0.022929463535547256+0j), (0.021679820492863655+0j), (0.02038497105240822+0j), (0.019055413082242012+0j), (0.01770169846713543+0j), (0.01633433625102043+0j), (0.014963650144636631+0j), (0.013599691912531853+0j), (0.012252125889062881+0j), (0.010930129326879978+0j), (0.009642308577895164+0j), (0.008396615274250507+0j), (0.007200280204415321+0j), (0.006059750914573669+0j), (0.004980647005140781+0j), (0.003967725206166506+0j), (0.0030248539987951517+0j), (0.002155006630346179+0j), (0.0013602608814835548+0j), (0.0006418122793547809+0j), (7.529256946386964e-19+0j), (-0.0005656589055433869-0j), (-0.0010564241092652082-0j), (-0.0014742778148502111-0j), (-0.0018218634650111198-0j), (-0.002102416940033436-0j), (-0.002319693798199296-0j), (-0.0024778901133686304-0j), (-0.0025815630797296762-0j), (-0.0026355483569204807-0j), (-0.002644877415150404-0j), (-0.002614697441458702-0j), (-0.002550191478803754-0j), (-0.002456504851579666-0j), (-0.0023386715911328793-0j), (-0.0022015515714883804-0j), (-0.002049771137535572-0j), (-0.001887670368887484-0j), (-0.0017192597733810544-0j), (-0.001548183267004788-0j), (-0.0013776910491287708-0j), (-0.0012106189969927073-0j), (-0.0010493781883269548-0j), (-0.0008959518163464963-0j), (-0.0007518998463638127-0j), (-0.0006183711811900139-0j), (-0.0004961232771165669-0j), (-0.00038554679485969245-0j), (-0.0002866971481125802-0j), (-0.00019932918075937778-0j), (-0.00012293666077312082-0j), (-5.6793996918713674e-05-0j), (-1.308664611038187e-19-0j), (4.8477591917617247e-05+0j), (8.975758828455582e-05+0j), (0.0001250018394785002+0j), (0.0001553735783090815+0j), (0.00018199831538368016+0j), (0.0002059282414847985+0j), (0.00022811056987848133+0j), (0.0002493603387847543+0j)]
        self.center_freq_7 = center_freq_7 = 21225000
        self.center_freq_6 = center_freq_6 = 18118000
        self.center_freq_5 = center_freq_5 = 14175000
        self.center_freq_4 = center_freq_4 = 10125000
        self.center_freq_3 = center_freq_3 = 7150000
        self.center_freq_2 = center_freq_2 = 5357000
        self.center_freq_1 = center_freq_1 = 3750000
        self.center_freq_0 = center_freq_0 = 1900000
        self.audio_usb_taps_voice_0 = audio_usb_taps_voice_0 = [(0.0002572417724877596-0.0001374986459268257j), (0.0002878009108826518-5.724696529796347e-05j), (0.0002794687170535326+2.7525682526174933e-05j), (0.0002341329090995714+9.69816610449925e-05j), (0.00016318418784067035+0.00013392265827860683j), (8.561440336052328e-05+0.0001281321165151894j), (2.4158369342330843e-05+7.964085671119392e-05j), (1.5657680039299833e-24-2.7651913754854074e-19j), (2.7038107873522677e-05-8.913061174098402e-05j), (0.00010708856279961765-0.00016026681987568736j), (0.0002275083534186706-0.00018670817371457815j), (0.00036241410998627543-0.0001501130172982812j), (0.0004778926959261298-4.7063575038919225e-05j), (0.0005404878174886107+0.0001075157051673159j), (0.0005270802648738027+0.00028173805912956595j), (0.0004334399418439716+0.00043345062294974923j), (0.00027858378598466516+0.0005212101386860013j), (0.00010282055882271379+0.0005169517244212329j), (-4.1051407606573775e-05+0.00041673853411339223j), (-0.00010186673898715526+0.00024591718101873994j), (-4.605679350788705e-05+5.611847882391885e-05j), (0.00012920450535602868-8.632845128886402e-05j), (0.00039022479904815555-0.0001183656495413743j), (0.0006713600596413016+1.2773153201806053e-08j), (0.0008901174878701568+0.0002700334880501032j), (0.000969712738879025+0.0006479704170487821j), (0.0008632044191472232+0.0010518638882786036j), (0.0005719668697565794+0.0013809375232085586j), (0.00015198890469036996+0.0015435363166034222j), (-0.0002956545795314014+0.001486169290728867j), (-0.0006494069239124656+0.0012148822424933314j), (-0.0008014018530957401+0.0008013606420718133j), (-0.0006920106243342161+0.0003698637883644551j), (-0.0003342635463923216+6.647997361142188e-05j), (0.0001806020736694336+1.7792548533179797e-05j), (0.0007005393272265792+0.00029019438079558313j), (0.0010506140533834696+0.0008622625027783215j), (0.001082494854927063+0.0016201590187847614j), (0.000721967255230993+0.00238022836856544j), (-7.547473046543018e-08+0.0029352258425205946j), (-0.0009444224997423589+0.0031130569986999035j), (-0.001892301719635725+0.00283187348395586j), (-0.0026011615991592407+0.0021346076391637325j), (-0.0028738845139741898+0.0011903169797733426j), (-0.0026223137974739075+0.0002582088636700064j), (-0.001905573415569961-0.0003790916525758803j), (-0.0009290410671383142-0.0004966125125065446j), (1.235710951624978e-18+1.235772162990307e-18j), (0.0005516125820577145+0.0010320557048544288j), (0.0004677253891713917+0.0023517159279435873j), (-0.00035426291287876666+0.0035959919914603233j), (-0.001814499613828957+0.004380288999527693j), (-0.0036179320886731148+0.0044082454405725j), (-0.00533935846760869+0.0035674595274031162j), (-0.006533329375088215+0.001981693087145686j), (-0.006861571222543716-1.6342895037269045e-07j), (-0.00620273919776082-0.001881740870885551j), (-0.004710869863629341-0.0031478635501116514j), (-0.002800307935103774-0.0034123484510928392j), (-0.001053818967193365-0.0025443120393902063j), (-7.231748895719647e-05-0.0007344266632571816j), (-0.0003032041131518781+0.0015241260407492518j), (-0.001894141430966556+0.003543493337929249j), (-0.0046166121028363705+0.004616400692611933j), (-0.00788835994899273+0.00421618577092886j), (-0.010898937471210957+0.0021676768083125353j), (-0.01281407568603754-0.0012623675866052508j), (-0.013010242953896523-0.005389360245317221j), (-0.011277255602180958-0.009255425073206425j), (-0.007929397746920586-0.011867750436067581j), (-0.0037841922603547573-0.012475799769163132j), (2.3712178176538146e-07-0.01081632450222969j), (0.0022014265414327383-0.007256560493260622j), (0.0018616663292050362-0.0027860498521476984j), (-0.0014106128364801407+0.0011576090473681688j), (-0.007248264271765947+0.003002147190272808j), (-0.0145023874938488+0.0014280482428148389j), (-0.021412136033177376-0.004259611014276743j), (-0.02594444714486599-0.01386830024421215j), (-0.026237111538648605-0.0262382123619318j), (-0.021048320457339287-0.03938060998916626j), (-0.010107523761689663-0.05081949383020401j), (0.005720863584429026-0.05807248502969742j), (0.024510696530342102-0.05917056277394295j), (0.04358147457242012-0.05310191959142685j), (0.05998324230313301-0.04007771238684654j), (0.07105987519025803-0.021554160863161087j), (0.07497094571590424+1.56401586082211e-06j), (0.0710589736700058+0.021557122468948364j), (0.059981569647789+0.04008021205663681j), (0.043579258024692535+0.0531037375330925j), (0.024508226662874222+0.059171583503484726j), (0.0057184407487511635+0.05807271972298622j), (-0.010109644383192062+0.050819072872400284j), (-0.02104996144771576+0.03937973454594612j), (-0.0262382123619318+0.026237111538648605j), (-0.0259450301527977+0.01386721059679985j), (-0.021412314847111702+0.004258712287992239j), (-0.014502327889204025-0.0014286567457020283j), (-0.007248138543218374-0.0030024514999240637j), (-0.0014105642912909389-0.0011576684191823006j), (0.001861549448221922+0.0027861278504133224j), (0.0022011217661201954+0.007256652694195509j), (-2.1674925676506973e-07+0.01081632450222969j), (-0.003784715663641691+0.012475641444325447j), (-0.00792989507317543+0.011867417953908443j), (-0.011277644895017147+0.00925495196133852j), (-0.01301046833395958+0.005388814490288496j), (-0.012814128771424294+0.0012618298642337322j), (-0.010898846201598644-0.002168134320527315j), (-0.007888183929026127-0.0042165168561041355j), (-0.0046164183877408504-0.004616594407707453j), (-0.0018939926521852612-0.0035435729660093784j), (-0.0003031401720363647-0.001524138730019331j), (-7.234830263769254e-05+0.0007344236364588141j), (-0.0010539257200434804+0.002544267801567912j), (-0.002800451125949621+0.003412230871617794j), (-0.004711002577096224+0.0031476656440645456j), (-0.006202818360179663+0.0018814806826412678j), (-0.006861571222543716-1.2449403641312529e-07j), (-0.006533246487379074-0.0019819671288132668j), (-0.005339208524674177-0.003567683743312955j), (-0.00361774698831141-0.00440839771181345j), (-0.0018143157940357924-0.004380364902317524j), (-0.00035411203862167895-0.0035960066597908735j), (0.0004678240802604705-0.0023516961373388767j), (0.0005516558885574341-0.001032032654620707j), (1.2357627538108392e-18-1.2357202574068693e-18j), (-0.0009290619054809213+0.0004965735133737326j), (-0.0019055892480537295+0.0003790116752497852j), (-0.0026223030872642994-0.00025831887614913285j), (-0.002873834455385804-0.0011904375860467553j), (-0.0026010721921920776-0.002134716836735606j), (-0.0018921829760074615-0.002831952879205346j), (-0.0009442918817512691-0.0031130965799093246j), (4.7692246596398036e-08-0.0029352258425205946j), (0.0007220670813694596-0.002380198100581765j), (0.00108256284147501-0.001620113616809249j), (0.0010506502585485578-0.00086221843957901j), (0.000700551550835371-0.00029016498592682183j), (0.00018060281581711024-1.7784970623324625e-05j), (-0.00033426075242459774-6.649400165770203e-05j), (-0.0006919951410964131-0.0003698928339872509j), (-0.0008013682090677321-0.0008013942860998213j), (-0.0006493559340015054-0.001214909483678639j), (-0.00029559223912656307-0.0014861817471683025j), (0.00015205367526505142-0.0015435299137607217j), (0.0005720248445868492-0.0013809135416522622j), (0.0008632485405541956-0.0010518275666981936j), (0.0009697399218566716-0.0006479296716861427j), (0.000890128780156374-0.0002699961478356272j), (0.0006713600596413016+1.539823557550335e-08j), (0.0003902198513969779+0.00011838202772196382j), (0.00012920089648105204+8.633387187728658e-05j), (-4.605443973559886e-05-5.612040695268661e-05j), (-0.00010185642895521596-0.0002459214301779866j), (-4.1033919842448086e-05-0.0004167402512393892j), (0.00010284224845236167-0.0005169474170543253j), (0.00027860564296133816-0.0005211984389461577j), (0.00043345813173800707-0.00043343243305571377j), (0.0005270920810289681-0.00028171594021841884j), (0.000540492357686162-0.0001074930332833901j), (0.00047789071686565876+4.708363121608272e-05j), (0.0003624078235588968+0.00015012822404969484j), (0.00022750052448827773+0.00018671770521905273j), (0.00010708183981478214+0.00016027131641749293j), (2.7034368031308986e-05+8.913174679037184e-05j), (-1.0037436181317756e-23+2.7651913754854074e-19j), (2.416171264485456e-05-7.963984535308555e-05j), (8.561977301724255e-05-0.000128128522192128j), (0.00016318979032803327-0.0001339158188784495j), (0.00023413696908392012-9.697183122625574e-05j), (0.0002794698521029204-2.7513957320479676e-05j), (0.0002877984952647239+5.7259043387603015e-05j), (0.0002572359808254987+0.00013750944344792515j)]
        self.audio_usb_taps_0 = audio_usb_taps_0 = [(0.0027534516993910074-0.0009699877118691802j), (0.0027984913904219866-2.7479556592879817e-05j), (0.002360810060054064+0.00077990343561396j), (0.0015852131182327867+0.0011999736307188869j), (0.0007375333807431161+0.001092153019271791j), (0.0001305434270761907+0.00048089533811435103j), (2.7843039788422175e-05-0.00043571810238063335j), (0.0005513789947144687-0.0013311404036357999j), (0.0016222791746258736-0.001843751990236342j), (0.0029602961149066687-0.0016962244408205152j), (0.004152807407081127-0.0008048593299463391j), (0.004782168660312891+0.0006614730227738619j), (0.0045765177346765995+0.0023036508355289698j), (0.003532964503392577+0.0036030602641403675j), (0.001961905974894762+0.0040960186161100864j), (0.0004210577462799847+0.003557684598490596j), (-0.0004557551583275199+0.0021269710268825293j), (-0.0001881249772850424+0.0003138624597340822j), (0.0013414869317784905-0.0011343793012201786j), (0.0037830134388059378-0.0014806066174060106j), (0.006377127952873707-0.000281859771348536j), (0.008180954493582249+0.002394299488514662j), (0.00840039923787117+0.005916353315114975j), (0.006716689560562372+0.009244933724403381j), (0.003479177597910166+0.011270305141806602j), (-0.00033090790384449065+0.01122765988111496j), (-0.0033858928363770247+0.009040611796081066j), (-0.004472110886126757+0.005449141841381788j), (-0.0029722631443291903+0.0018414802616462111j), (0.0008136758697219193-0.00018690538126975298j), (0.005655196961015463+0.0005851133028045297j), (0.009732664562761784+0.0044869957491755486j), (0.011249654926359653+0.010710894130170345j), (0.009116974659264088+0.0174676813185215j), (0.003455801634117961+0.022536933422088623j), (-0.004295370075851679+0.024050896987318993j), (-0.011760447174310684+0.021242840215563774j), (-0.016407759860157967+0.014870581217110157j), (-0.016486315056681633+0.007114690262824297j), (-0.011779874563217163+0.0009268784779123962j), (-0.00387182692065835-0.000990139553323388j), (0.004236443899571896+0.002771037630736828j), (0.009084612131118774+0.011641266755759716j), (0.007995015010237694+0.023056933656334877j), (0.00016236530791502446+0.03318708762526512j), (-0.012834062799811363+0.03821635618805885j), (-0.027351530268788338+0.03576507791876793j), (-0.038809794932603836+0.02593102678656578j), (-0.043289657682180405+0.011522861197590828j), (-0.03905987739562988-0.0026890826411545277j), (-0.02745700255036354-0.011531739495694637j), (-0.012722577899694443-0.011305872350931168j), (-0.0007470044074580073-0.0013186876894906163j), (0.0029308623634278774+0.015530806966125965j), (-0.00479168351739645+0.033429861068725586j), (-0.02317208983004093+0.04547644406557083j), (-0.047478482127189636+0.04609925299882889j), (-0.07029653340578079+0.03324682638049126j), (-0.08396077901124954+0.009518826380372047j), (-0.08333911746740341-0.018286077305674553j), (-0.06799081712961197-0.041208039969205856j), (-0.04284537956118584-0.05117538943886757j), (-0.016997158527374268-0.04406467452645302j), (-0.0008509386680088937-0.021662907674908638j), (-0.002472452586516738+0.008296702057123184j), (-0.02437339909374714+0.034248534590005875j), (-0.06193532049655914+0.04453490301966667j), (-0.10422011464834213+0.03161374852061272j), (-0.13714809715747833-0.004715736489742994j), (-0.14818614721298218-0.056329261511564255j), (-0.13106486201286316-0.10864532738924026j), (-0.08887110650539398-0.14502765238285065j), (-0.034241918474435806-0.1524932086467743j), (0.013760599307715893-0.1269146203994751j), (0.03543386608362198-0.07587811350822449j), (0.017255716025829315-0.017946647480130196j), (-0.042398009449243546+0.021865131333470345j), (-0.13063979148864746+0.019377216696739197j), (-0.22176052629947662-0.040728043764829636j), (-0.2831699550151825-0.15858665108680725j), (-0.2841959595680237-0.3166787028312683j), (-0.20535197854042053-0.4823295474052429j), (-0.04535046964883804-0.6148901581764221j), (0.17637498676776886-0.6758753061294556j), (0.42268723249435425-0.6393532752990723j), (0.6467890739440918-0.49965900182724j), (0.8033024072647095-0.27414149045944214j), (0.8594496846199036+9.2208947535255e-06j), (0.8032965064048767+0.2741587162017822j), (0.6467783451080322+0.49967288970947266j), (0.4226734936237335+0.6393623352050781j), (0.17636047303676605+0.6758790612220764j), (-0.045363668352365494+0.6148892045021057j), (-0.20536231994628906+0.48232513666152954j), (-0.2842027544975281+0.3166726231575012j), (-0.2831733524799347+0.15858057141304016j), (-0.22176140546798706+0.0407232828438282j), (-0.13063937425613403-0.01938001997768879j), (-0.04239754006266594-0.02186604216694832j), (0.017255332320928574+0.017947018146514893j), (0.03543223813176155+0.07587887346744537j), (0.013757876120507717+0.12691490352153778j), (-0.034245189279317856+0.1524924784898758j), (-0.0888742208480835+0.14502575993537903j), (-0.1310671865940094+0.10864251852035522j), (-0.14818735420703888+0.05632608383893967j), (-0.1371481865644455+0.004712793510407209j), (-0.10421943664550781-0.031615983694791794j), (-0.06193436682224274-0.044536229223012924j), (-0.024372665211558342-0.03424905613064766j), (-0.0024722747039049864-0.008296755142509937j), (-0.0008514035725966096+0.021662889048457146j), (-0.016998082399368286+0.044064316898584366j), (-0.042846452444791794+0.05117449164390564j), (-0.06799168139696121+0.041206613183021545j), (-0.08333950489759445+0.018284328281879425j), (-0.08396058529615402-0.009520587511360645j), (-0.07029583305120468-0.03324830159544945j), (-0.04747750982642174-0.046100251376628876j), (-0.023171136155724525-0.04547693207859993j), (-0.004790981765836477-0.033429961651563644j), (0.002931188326328993-0.01553074549883604j), (-0.0007470321143046021+0.0013186719734221697j), (-0.01272281538695097+0.011305605061352253j), (-0.02745724655687809+0.011531163938343525j), (-0.03905993327498436+0.0026882633101195097j), (-0.0432894192636013-0.011523768305778503j), (-0.03880925104022026-0.025931838899850845j), (-0.02735077776014805-0.035765647888183594j), (-0.012833261862397194-0.03821662440896034j), (0.00016306160250678658-0.03318708389997482j), (0.007995499297976494-0.023056767880916595j), (0.009084857068955898-0.011641076765954494j), (0.004236502107232809-0.0027709484566003084j), (-0.003871847642585635+0.000990058295428753j), (-0.011779855005443096-0.0009271256276406348j), (-0.016486166045069695-0.007115036249160767j), (-0.016407446935772896-0.014870925806462765j), (-0.011760001070797443-0.021243086084723473j), (-0.004294865299016237-0.024050988256931305j), (0.0034562747459858656-0.022536862641572952j), (0.009117341600358486-0.01746748946607113j), (0.01124988030642271-0.010710657574236393j), (0.009732759557664394-0.004486791789531708j), (0.005655209068208933-0.000584994675591588j), (0.0008136719116009772+0.00018692246521823108j), (-0.0029722244944423437-0.0018415427766740322j), (-0.004471996799111366-0.005449235439300537j), (-0.0033857033122330904-0.009040683507919312j), (-0.0003306723665446043-0.011227666400372982j), (0.0034794139210134745-0.011270231567323208j), (0.006716882809996605-0.009244793094694614j), (0.008400523103773594-0.005916176829487085j), (0.008181004785001278-0.002394127892330289j), (0.006377121899276972+0.0002819935907609761j), (0.003782982472330332+0.0014806861290708184j), (0.001341463066637516+0.0011344074737280607j), (-0.00018811839981935918-0.0003138663887511939j), (-0.0004557105421554297-0.0021269803401082754j), (0.00042113239760510623-0.003557675750926137j), (0.001961992122232914-0.004095977637916803j), (0.003533039940521121-0.003602985991165042j), (0.004576565697789192-0.0023035546764731407j), (0.00478218263015151-0.0006613726727664471j), (0.004152790643274784+0.0008049464668147266j), (0.0029602604918181896+0.0016962866066023707j), (0.0016222404083237052+0.0018437860999256372j), (0.0005513510550372303+0.001331151812337339j), (2.7833899366669357e-05+0.00043571871356107295j), (0.00013055351155344397-0.0004808926023542881j), (0.000737556314561516-0.001092137536033988j), (0.001585238380357623-0.0011999404523521662j), (0.0023608263581991196-0.0007798539591021836j), (0.0027984909247606993+2.7538271751836874e-05j), (0.002753431210294366+0.0009700455120764673j)]
        self.audio_decim = audio_decim = 4
        self.audio_bpf_voice = audio_bpf_voice = [0.0018120616441592574, -0.0, 0.002514434279873967, 0.002985243685543537, -0.0007079992210492492, 0.004741193726658821, 0.00411085644736886, -0.005856884177774191, 0.005198285914957523, 7.730309708315301e-18, -0.02186439372599125, 2.2320216478296047e-17, -0.014062493108212948, -0.05356903001666069, -0.00827835313975811, -0.036448944360017776, -0.10315141081809998, 2.437763634611959e-17, -0.05780387297272682, -0.20961540937423706, 0.1960151046514511, 0.5997917056083679, 0.1960151046514511, -0.20961540937423706, -0.05780387297272682, 2.437763634611959e-17, -0.10315141081809998, -0.036448944360017776, -0.00827835313975811, -0.05356903001666069, -0.014062493108212948, 2.2320216478296047e-17, -0.02186439372599125, 7.730309708315301e-18, 0.005198285914957523, -0.005856884177774191, 0.00411085644736886, 0.004741193726658821, -0.0007079992210492492, 0.002985243685543537, 0.002514434279873967, 0.0, 0.0018120616441592574]
        self.ale_chan_21BHFL = ale_chan_21BHFL = 21432500
        self.ale_chan_21AHFN = ale_chan_21AHFN = 21096000
        self.ale_chan_18BHFL = ale_chan_18BHFL = 18117500
        self.ale_chan_18AHFN = ale_chan_18AHFN = 18106000
        self.ale_chan_14BHFL = ale_chan_14BHFL = 14346000
        self.ale_chan_14AHFN = ale_chan_14AHFN = 14109000
        self.ale_chan_10AHFN = ale_chan_10AHFN = 10145500
        self.ale_chan_07CHFL = ale_chan_07CHFL = 7296000
        self.ale_chan_07BHFL = ale_chan_07BHFL = 7185500
        self.ale_chan_07AHFN = ale_chan_07AHFN = 7102000
        self.ale_chan_05CHFL = ale_chan_05CHFL = 5371500
        self.ale_chan_05BHFL = ale_chan_05BHFL = 5360000
        self.ale_chan_05AHFN = ale_chan_05AHFN = 5357000
        self.ale_chan_03CHFL = ale_chan_03CHFL = 3996000
        self.ale_chan_03BHFL = ale_chan_03BHFL = 3791000
        self.ale_chan_03AHFN = ale_chan_03AHFN = 3596000
        self.ale_chan_01BHFL = ale_chan_01BHFL = 1996000
        self.ale_chan_01AHFN = ale_chan_01AHFN = 1843000

        ##################################################
        # Blocks
        ##################################################
        self.k6drs_sideband_selector_0 = k6drs.sideband_selector()
        self.k6drs_portaudio_0 = k6drs.portaudio(8000,2)
        self.k6drs_command_decoder_0 = k6drs.command_decoder(center_freq_0)
        self.k6drs_baseband_io_0 = k6drs.baseband_io('192.168.0.225', '127.0.0.1', 12347)
        self.k6drs_band_selector_0 = k6drs.band_selector(640000)
        self.k6drs_ale_2g_tx_phy_fec_sublayers_0 = k6drs.ale_2g_tx_phy_fec_sublayers()
        (self.k6drs_ale_2g_tx_phy_fec_sublayers_0).set_max_output_buffer(8192)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_4 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_01BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_21BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_21AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_18BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_18AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_14BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_14AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_3 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_10AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_2_0_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_07CHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_2_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_07BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_2 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_07AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_1_1 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_05CHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_1_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_05BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_1 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_05AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_0_1 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_03CHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_0_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_03BHFL, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_03AHFN, 25)
        self.k6drs_ale2g_rx_phy_fec_sublayers_0 = k6drs.ale2g_rx_phy_fec_sublayers(ale_chan_01AHFN, 25)
        self.freq_xlating_fir_filter_xxx_0_4 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_01BHFL - center_freq_0, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_3 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), 0, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_2 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_10AHFN - center_freq_4, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1_2 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_05CHFL - center_freq_2, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1_1 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_05BHFL - center_freq_2, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_18BHFL - center_freq_6, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_18AHFN - center_freq_6, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_1 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_05AHFN - center_freq_2, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_3 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_03CHFL - center_freq_1, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_2 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_03BHFL - center_freq_1, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_1_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_14BHFL - center_freq_5, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_1 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_14AHFN - center_freq_5, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0_1_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_07CHFL - center_freq_3, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0_1 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_07BHFL - center_freq_3, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_21BHFL - center_freq_7, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_21AHFN - center_freq_7, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_07AHFN - center_freq_3, samp_rate)
        self.freq_xlating_fir_filter_xxx_0_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_03AHFN - center_freq_1, samp_rate)
        self.freq_xlating_fir_filter_xxx_0 = filter.freq_xlating_fir_filter_ccc(ddc_decim, (channel_filter_taps), ale_chan_01AHFN - center_freq_0, samp_rate)
        self.fir_filter_xxx_0 = filter.fir_filter_fff(1, (audio_bpf_voice))
        self.fir_filter_xxx_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_voice_0), 1)
        self.fft_filter_xxx_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_3 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_3.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_2 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_2.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_1_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_1_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0_1_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0_1_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_2 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_2.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0_2 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0_2.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0_1 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0_1.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0_0.declare_sample_delay(0)
        self.fft_filter_xxx_0_0_0 = filter.fft_filter_ccc(audio_decim, (audio_usb_taps_0), 1)
        self.fft_filter_xxx_0_0_0.declare_sample_delay(0)
        self.blocks_udp_source_0 = blocks.udp_source(gr.sizeof_gr_complex*1, '127.0.0.1', 1234, 1472, True)
        self.blocks_udp_sink_0 = blocks.udp_sink(gr.sizeof_float*1, '127.0.0.1', 62345, 1472, False)
        self.blocks_socket_pdu_1 = blocks.socket_pdu("UDP_SERVER", '127.0.0.1', '54321', 10000, False)
        self.blocks_socket_pdu_0 = blocks.socket_pdu("UDP_CLIENT", '127.0.0.1', '12345', 1500, False)
        self.blocks_short_to_float_0 = blocks.short_to_float(1, 32768)
        (self.blocks_short_to_float_0).set_max_output_buffer(8192)
        self.blocks_multiply_const_vxx_0 = blocks.multiply_const_vff((50.0, ))
        self.blocks_complex_to_real_0_0_1_3 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_2 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1_2 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1_0_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_3 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_2 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_1_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0_1_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0_0_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1_0 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_1 = blocks.complex_to_real(1)
        self.blocks_complex_to_real_0_0_0 = blocks.complex_to_real(1)

        ##################################################
        # Connections
        ##################################################
        self.msg_connect((self.blocks_socket_pdu_1, 'pdus'), (self.k6drs_command_decoder_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_0_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_0_1, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_1, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_1_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_1_1, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_2, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_2_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_2_0_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2_0, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_ale2g_rx_phy_fec_sublayers_0_4, 'rx_message'), (self.blocks_socket_pdu_0, 'pdus'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.freq_xlating_fir_filter_xxx_0_3, 'freq'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_ale_2g_tx_phy_fec_sublayers_0, 'ale_tx_message'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_band_selector_0, 'control_message'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_baseband_io_0, 'cmd'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_portaudio_0, 'cmd'))
        self.msg_connect((self.k6drs_command_decoder_0, 'cmd_out'), (self.k6drs_sideband_selector_0, 'control_message'))
        self.msg_connect((self.k6drs_portaudio_0, 'tx_complete_event'), (self.blocks_socket_pdu_0, 'pdus'))
        self.connect((self.blocks_complex_to_real_0_0_0, 0), (self.blocks_multiply_const_vxx_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_2, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0_0_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_2_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_2_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_0_1_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_2_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_1_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_2, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_0_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_0_3, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_0_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1_0_0, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3_1_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1_1, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_1_0, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_1_2, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_1_1, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_2, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_3, 0))
        self.connect((self.blocks_complex_to_real_0_0_1_3, 0), (self.k6drs_ale2g_rx_phy_fec_sublayers_0_4, 0))
        self.connect((self.blocks_multiply_const_vxx_0, 0), (self.fir_filter_xxx_0, 0))
        self.connect((self.blocks_short_to_float_0, 0), (self.k6drs_portaudio_0, 0))
        self.connect((self.blocks_udp_source_0, 0), (self.k6drs_baseband_io_0, 0))
        self.connect((self.fft_filter_xxx_0_0_0, 0), (self.blocks_complex_to_real_0_0_1, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0, 0), (self.blocks_complex_to_real_0_0_1_1, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0_0, 0), (self.blocks_complex_to_real_0_0_1_1_0, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0_0_0, 0), (self.blocks_complex_to_real_0_0_1_1_0_0, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0_1, 0), (self.blocks_complex_to_real_0_0_1_1_1, 0))
        self.connect((self.fft_filter_xxx_0_0_0_0_2, 0), (self.blocks_complex_to_real_0_0_1_1_2, 0))
        self.connect((self.fft_filter_xxx_0_0_0_1, 0), (self.blocks_complex_to_real_0_0_1_2, 0))
        self.connect((self.fft_filter_xxx_0_0_0_2, 0), (self.blocks_complex_to_real_0_0_1_3, 0))
        self.connect((self.fft_filter_xxx_0_0_1, 0), (self.blocks_complex_to_real_0_0_1_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0, 0), (self.blocks_complex_to_real_0_0_1_0_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0_0, 0), (self.blocks_complex_to_real_0_0_1_0_0_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0_0_0, 0), (self.blocks_complex_to_real_0_0_1_0_0_0_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0_1, 0), (self.blocks_complex_to_real_0_0_1_0_0_1, 0))
        self.connect((self.fft_filter_xxx_0_0_1_0_1_0, 0), (self.blocks_complex_to_real_0_0_1_0_0_1_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_1, 0), (self.blocks_complex_to_real_0_0_1_0_1, 0))
        self.connect((self.fft_filter_xxx_0_0_1_1_0, 0), (self.blocks_complex_to_real_0_0_1_0_1_0, 0))
        self.connect((self.fft_filter_xxx_0_0_1_2, 0), (self.blocks_complex_to_real_0_0_1_0_2, 0))
        self.connect((self.fft_filter_xxx_0_0_1_3, 0), (self.blocks_complex_to_real_0_0_1_0_3, 0))
        self.connect((self.fft_filter_xxx_0_1, 0), (self.blocks_complex_to_real_0_0_0, 0))
        self.connect((self.fir_filter_xxx_0, 0), (self.blocks_udp_sink_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0, 0), (self.fft_filter_xxx_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0, 0), (self.fft_filter_xxx_0_0_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0, 0), (self.fft_filter_xxx_0_0_1_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0_0, 0), (self.fft_filter_xxx_0_0_1_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0_0_0, 0), (self.fft_filter_xxx_0_0_1_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0_1, 0), (self.fft_filter_xxx_0_0_1_0_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_0_1_0, 0), (self.fft_filter_xxx_0_0_1_0_1_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_1, 0), (self.fft_filter_xxx_0_0_1_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_1_0, 0), (self.fft_filter_xxx_0_0_1_1_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_2, 0), (self.fft_filter_xxx_0_0_1_2, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_0_3, 0), (self.fft_filter_xxx_0_0_1_3, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1, 0), (self.fft_filter_xxx_0_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1_0, 0), (self.fft_filter_xxx_0_0_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1_0_0, 0), (self.fft_filter_xxx_0_0_0_0_0_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1_1, 0), (self.fft_filter_xxx_0_0_0_0_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_1_2, 0), (self.fft_filter_xxx_0_0_0_0_2, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_2, 0), (self.fft_filter_xxx_0_0_0_1, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_3, 0), (self.k6drs_sideband_selector_0, 0))
        self.connect((self.freq_xlating_fir_filter_xxx_0_4, 0), (self.fft_filter_xxx_0_0_0_2, 0))
        self.connect((self.k6drs_ale_2g_tx_phy_fec_sublayers_0, 0), (self.blocks_short_to_float_0, 0))
        self.connect((self.k6drs_band_selector_0, 0), (self.freq_xlating_fir_filter_xxx_0_3, 0))
        self.connect((self.k6drs_baseband_io_0, 0), (self.freq_xlating_fir_filter_xxx_0, 0))
        self.connect((self.k6drs_baseband_io_0, 1), (self.freq_xlating_fir_filter_xxx_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 3), (self.freq_xlating_fir_filter_xxx_0_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 7), (self.freq_xlating_fir_filter_xxx_0_0_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 7), (self.freq_xlating_fir_filter_xxx_0_0_0_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 3), (self.freq_xlating_fir_filter_xxx_0_0_0_1, 0))
        self.connect((self.k6drs_baseband_io_0, 3), (self.freq_xlating_fir_filter_xxx_0_0_0_1_0, 0))
        self.connect((self.k6drs_baseband_io_0, 5), (self.freq_xlating_fir_filter_xxx_0_0_1, 0))
        self.connect((self.k6drs_baseband_io_0, 5), (self.freq_xlating_fir_filter_xxx_0_0_1_0, 0))
        self.connect((self.k6drs_baseband_io_0, 1), (self.freq_xlating_fir_filter_xxx_0_0_2, 0))
        self.connect((self.k6drs_baseband_io_0, 1), (self.freq_xlating_fir_filter_xxx_0_0_3, 0))
        self.connect((self.k6drs_baseband_io_0, 2), (self.freq_xlating_fir_filter_xxx_0_1, 0))
        self.connect((self.k6drs_baseband_io_0, 6), (self.freq_xlating_fir_filter_xxx_0_1_0, 0))
        self.connect((self.k6drs_baseband_io_0, 6), (self.freq_xlating_fir_filter_xxx_0_1_0_0, 0))
        self.connect((self.k6drs_baseband_io_0, 2), (self.freq_xlating_fir_filter_xxx_0_1_1, 0))
        self.connect((self.k6drs_baseband_io_0, 2), (self.freq_xlating_fir_filter_xxx_0_1_2, 0))
        self.connect((self.k6drs_baseband_io_0, 4), (self.freq_xlating_fir_filter_xxx_0_2, 0))
        self.connect((self.k6drs_baseband_io_0, 0), (self.freq_xlating_fir_filter_xxx_0_4, 0))
        self.connect((self.k6drs_baseband_io_0, 0), (self.k6drs_band_selector_0, 0))
        self.connect((self.k6drs_baseband_io_0, 1), (self.k6drs_band_selector_0, 1))
        self.connect((self.k6drs_baseband_io_0, 2), (self.k6drs_band_selector_0, 2))
        self.connect((self.k6drs_baseband_io_0, 3), (self.k6drs_band_selector_0, 3))
        self.connect((self.k6drs_baseband_io_0, 4), (self.k6drs_band_selector_0, 4))
        self.connect((self.k6drs_baseband_io_0, 5), (self.k6drs_band_selector_0, 5))
        self.connect((self.k6drs_baseband_io_0, 6), (self.k6drs_band_selector_0, 6))
        self.connect((self.k6drs_baseband_io_0, 7), (self.k6drs_band_selector_0, 7))
        self.connect((self.k6drs_sideband_selector_0, 0), (self.fft_filter_xxx_0_1, 0))

    def get_samp_rate_downconv(self):
        return self.samp_rate_downconv

    def set_samp_rate_downconv(self, samp_rate_downconv):
        self.samp_rate_downconv = samp_rate_downconv

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate

    def get_ddc_decim(self):
        return self.ddc_decim

    def set_ddc_decim(self, ddc_decim):
        self.ddc_decim = ddc_decim

    def get_channel_filter_taps(self):
        return self.channel_filter_taps

    def set_channel_filter_taps(self, channel_filter_taps):
        self.channel_filter_taps = channel_filter_taps
        self.freq_xlating_fir_filter_xxx_0_4.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_3.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_2.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1_2.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1_1.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_1.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_3.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_2.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_1_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_1.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0_1_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0_1.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0_0.set_taps((self.channel_filter_taps))
        self.freq_xlating_fir_filter_xxx_0.set_taps((self.channel_filter_taps))

    def get_center_freq_7(self):
        return self.center_freq_7

    def set_center_freq_7(self, center_freq_7):
        self.center_freq_7 = center_freq_7
        self.freq_xlating_fir_filter_xxx_0_0_0_0_0.set_center_freq(self.ale_chan_21BHFL - self.center_freq_7)
        self.freq_xlating_fir_filter_xxx_0_0_0_0.set_center_freq(self.ale_chan_21AHFN - self.center_freq_7)

    def get_center_freq_6(self):
        return self.center_freq_6

    def set_center_freq_6(self, center_freq_6):
        self.center_freq_6 = center_freq_6
        self.freq_xlating_fir_filter_xxx_0_1_0_0.set_center_freq(self.ale_chan_18BHFL - self.center_freq_6)
        self.freq_xlating_fir_filter_xxx_0_1_0.set_center_freq(self.ale_chan_18AHFN - self.center_freq_6)

    def get_center_freq_5(self):
        return self.center_freq_5

    def set_center_freq_5(self, center_freq_5):
        self.center_freq_5 = center_freq_5
        self.freq_xlating_fir_filter_xxx_0_0_1_0.set_center_freq(self.ale_chan_14BHFL - self.center_freq_5)
        self.freq_xlating_fir_filter_xxx_0_0_1.set_center_freq(self.ale_chan_14AHFN - self.center_freq_5)

    def get_center_freq_4(self):
        return self.center_freq_4

    def set_center_freq_4(self, center_freq_4):
        self.center_freq_4 = center_freq_4
        self.freq_xlating_fir_filter_xxx_0_2.set_center_freq(self.ale_chan_10AHFN - self.center_freq_4)

    def get_center_freq_3(self):
        return self.center_freq_3

    def set_center_freq_3(self, center_freq_3):
        self.center_freq_3 = center_freq_3
        self.freq_xlating_fir_filter_xxx_0_0_0_1_0.set_center_freq(self.ale_chan_07CHFL - self.center_freq_3)
        self.freq_xlating_fir_filter_xxx_0_0_0_1.set_center_freq(self.ale_chan_07BHFL - self.center_freq_3)
        self.freq_xlating_fir_filter_xxx_0_0_0.set_center_freq(self.ale_chan_07AHFN - self.center_freq_3)

    def get_center_freq_2(self):
        return self.center_freq_2

    def set_center_freq_2(self, center_freq_2):
        self.center_freq_2 = center_freq_2
        self.freq_xlating_fir_filter_xxx_0_1_2.set_center_freq(self.ale_chan_05CHFL - self.center_freq_2)
        self.freq_xlating_fir_filter_xxx_0_1_1.set_center_freq(self.ale_chan_05BHFL - self.center_freq_2)
        self.freq_xlating_fir_filter_xxx_0_1.set_center_freq(self.ale_chan_05AHFN - self.center_freq_2)

    def get_center_freq_1(self):
        return self.center_freq_1

    def set_center_freq_1(self, center_freq_1):
        self.center_freq_1 = center_freq_1
        self.freq_xlating_fir_filter_xxx_0_0_3.set_center_freq(self.ale_chan_03CHFL - self.center_freq_1)
        self.freq_xlating_fir_filter_xxx_0_0_2.set_center_freq(self.ale_chan_03BHFL - self.center_freq_1)
        self.freq_xlating_fir_filter_xxx_0_0.set_center_freq(self.ale_chan_03AHFN - self.center_freq_1)

    def get_center_freq_0(self):
        return self.center_freq_0

    def set_center_freq_0(self, center_freq_0):
        self.center_freq_0 = center_freq_0
        self.freq_xlating_fir_filter_xxx_0_4.set_center_freq(self.ale_chan_01BHFL - self.center_freq_0)
        self.freq_xlating_fir_filter_xxx_0.set_center_freq(self.ale_chan_01AHFN - self.center_freq_0)

    def get_audio_usb_taps_voice_0(self):
        return self.audio_usb_taps_voice_0

    def set_audio_usb_taps_voice_0(self, audio_usb_taps_voice_0):
        self.audio_usb_taps_voice_0 = audio_usb_taps_voice_0
        self.fft_filter_xxx_0_1.set_taps((self.audio_usb_taps_voice_0))

    def get_audio_usb_taps_0(self):
        return self.audio_usb_taps_0

    def set_audio_usb_taps_0(self, audio_usb_taps_0):
        self.audio_usb_taps_0 = audio_usb_taps_0
        self.fft_filter_xxx_0_0_1_3.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_2.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_1_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0_1_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_2.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0_2.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0_1.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0_0.set_taps((self.audio_usb_taps_0))
        self.fft_filter_xxx_0_0_0.set_taps((self.audio_usb_taps_0))

    def get_audio_decim(self):
        return self.audio_decim

    def set_audio_decim(self, audio_decim):
        self.audio_decim = audio_decim

    def get_audio_bpf_voice(self):
        return self.audio_bpf_voice

    def set_audio_bpf_voice(self, audio_bpf_voice):
        self.audio_bpf_voice = audio_bpf_voice
        self.fir_filter_xxx_0.set_taps((self.audio_bpf_voice))

    def get_ale_chan_21BHFL(self):
        return self.ale_chan_21BHFL

    def set_ale_chan_21BHFL(self, ale_chan_21BHFL):
        self.ale_chan_21BHFL = ale_chan_21BHFL
        self.freq_xlating_fir_filter_xxx_0_0_0_0_0.set_center_freq(self.ale_chan_21BHFL - self.center_freq_7)

    def get_ale_chan_21AHFN(self):
        return self.ale_chan_21AHFN

    def set_ale_chan_21AHFN(self, ale_chan_21AHFN):
        self.ale_chan_21AHFN = ale_chan_21AHFN
        self.freq_xlating_fir_filter_xxx_0_0_0_0.set_center_freq(self.ale_chan_21AHFN - self.center_freq_7)

    def get_ale_chan_18BHFL(self):
        return self.ale_chan_18BHFL

    def set_ale_chan_18BHFL(self, ale_chan_18BHFL):
        self.ale_chan_18BHFL = ale_chan_18BHFL
        self.freq_xlating_fir_filter_xxx_0_1_0_0.set_center_freq(self.ale_chan_18BHFL - self.center_freq_6)

    def get_ale_chan_18AHFN(self):
        return self.ale_chan_18AHFN

    def set_ale_chan_18AHFN(self, ale_chan_18AHFN):
        self.ale_chan_18AHFN = ale_chan_18AHFN
        self.freq_xlating_fir_filter_xxx_0_1_0.set_center_freq(self.ale_chan_18AHFN - self.center_freq_6)

    def get_ale_chan_14BHFL(self):
        return self.ale_chan_14BHFL

    def set_ale_chan_14BHFL(self, ale_chan_14BHFL):
        self.ale_chan_14BHFL = ale_chan_14BHFL
        self.freq_xlating_fir_filter_xxx_0_0_1_0.set_center_freq(self.ale_chan_14BHFL - self.center_freq_5)

    def get_ale_chan_14AHFN(self):
        return self.ale_chan_14AHFN

    def set_ale_chan_14AHFN(self, ale_chan_14AHFN):
        self.ale_chan_14AHFN = ale_chan_14AHFN
        self.freq_xlating_fir_filter_xxx_0_0_1.set_center_freq(self.ale_chan_14AHFN - self.center_freq_5)

    def get_ale_chan_10AHFN(self):
        return self.ale_chan_10AHFN

    def set_ale_chan_10AHFN(self, ale_chan_10AHFN):
        self.ale_chan_10AHFN = ale_chan_10AHFN
        self.freq_xlating_fir_filter_xxx_0_2.set_center_freq(self.ale_chan_10AHFN - self.center_freq_4)

    def get_ale_chan_07CHFL(self):
        return self.ale_chan_07CHFL

    def set_ale_chan_07CHFL(self, ale_chan_07CHFL):
        self.ale_chan_07CHFL = ale_chan_07CHFL
        self.freq_xlating_fir_filter_xxx_0_0_0_1_0.set_center_freq(self.ale_chan_07CHFL - self.center_freq_3)

    def get_ale_chan_07BHFL(self):
        return self.ale_chan_07BHFL

    def set_ale_chan_07BHFL(self, ale_chan_07BHFL):
        self.ale_chan_07BHFL = ale_chan_07BHFL
        self.freq_xlating_fir_filter_xxx_0_0_0_1.set_center_freq(self.ale_chan_07BHFL - self.center_freq_3)

    def get_ale_chan_07AHFN(self):
        return self.ale_chan_07AHFN

    def set_ale_chan_07AHFN(self, ale_chan_07AHFN):
        self.ale_chan_07AHFN = ale_chan_07AHFN
        self.freq_xlating_fir_filter_xxx_0_0_0.set_center_freq(self.ale_chan_07AHFN - self.center_freq_3)

    def get_ale_chan_05CHFL(self):
        return self.ale_chan_05CHFL

    def set_ale_chan_05CHFL(self, ale_chan_05CHFL):
        self.ale_chan_05CHFL = ale_chan_05CHFL
        self.freq_xlating_fir_filter_xxx_0_1_2.set_center_freq(self.ale_chan_05CHFL - self.center_freq_2)

    def get_ale_chan_05BHFL(self):
        return self.ale_chan_05BHFL

    def set_ale_chan_05BHFL(self, ale_chan_05BHFL):
        self.ale_chan_05BHFL = ale_chan_05BHFL
        self.freq_xlating_fir_filter_xxx_0_1_1.set_center_freq(self.ale_chan_05BHFL - self.center_freq_2)

    def get_ale_chan_05AHFN(self):
        return self.ale_chan_05AHFN

    def set_ale_chan_05AHFN(self, ale_chan_05AHFN):
        self.ale_chan_05AHFN = ale_chan_05AHFN
        self.freq_xlating_fir_filter_xxx_0_1.set_center_freq(self.ale_chan_05AHFN - self.center_freq_2)

    def get_ale_chan_03CHFL(self):
        return self.ale_chan_03CHFL

    def set_ale_chan_03CHFL(self, ale_chan_03CHFL):
        self.ale_chan_03CHFL = ale_chan_03CHFL
        self.freq_xlating_fir_filter_xxx_0_0_3.set_center_freq(self.ale_chan_03CHFL - self.center_freq_1)

    def get_ale_chan_03BHFL(self):
        return self.ale_chan_03BHFL

    def set_ale_chan_03BHFL(self, ale_chan_03BHFL):
        self.ale_chan_03BHFL = ale_chan_03BHFL
        self.freq_xlating_fir_filter_xxx_0_0_2.set_center_freq(self.ale_chan_03BHFL - self.center_freq_1)

    def get_ale_chan_03AHFN(self):
        return self.ale_chan_03AHFN

    def set_ale_chan_03AHFN(self, ale_chan_03AHFN):
        self.ale_chan_03AHFN = ale_chan_03AHFN
        self.freq_xlating_fir_filter_xxx_0_0.set_center_freq(self.ale_chan_03AHFN - self.center_freq_1)

    def get_ale_chan_01BHFL(self):
        return self.ale_chan_01BHFL

    def set_ale_chan_01BHFL(self, ale_chan_01BHFL):
        self.ale_chan_01BHFL = ale_chan_01BHFL
        self.freq_xlating_fir_filter_xxx_0_4.set_center_freq(self.ale_chan_01BHFL - self.center_freq_0)

    def get_ale_chan_01AHFN(self):
        return self.ale_chan_01AHFN

    def set_ale_chan_01AHFN(self, ale_chan_01AHFN):
        self.ale_chan_01AHFN = ale_chan_01AHFN
        self.freq_xlating_fir_filter_xxx_0.set_center_freq(self.ale_chan_01AHFN - self.center_freq_0)


def main(top_block_cls=ale2g_parallel_18_v0_2, options=None):
    if gr.enable_realtime_scheduling() != gr.RT_OK:
        print "Error: failed to enable real-time scheduling."

    tb = top_block_cls()
    tb.start()
    tb.wait()


if __name__ == '__main__':
    main()
